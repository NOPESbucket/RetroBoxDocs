{"searchDocs":[{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/RetroBoxDocs/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. For example, use JSX to create an interactive button: &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":"","version":null},{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/RetroBoxDocs/blog/first-blog-post","content":"Lorem ipsum dolor sit amet... ...consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"Welcome","type":0,"sectionRef":"#","url":"/RetroBoxDocs/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Here are a few tips you might find useful. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":"","version":null},{"title":"Widget","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/core/Widget","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Widget","url":"/RetroBoxDocs/docs/api-class-reference/core/Widget#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> _scope: Fusion.Scope Private​","type":1,"pageTitle":"Widget","url":"/RetroBoxDocs/docs/api-class-reference/core/Widget#-_scope-fusionscope-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _trove:  Trove.Trove Private​","type":1,"pageTitle":"Widget","url":"/RetroBoxDocs/docs/api-class-reference/core/Widget#-_trove--trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Widget","url":"/RetroBoxDocs/docs/api-class-reference/core/Widget#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> Widget.GetValue(self: Types.Widget, name: string): unknown​","type":1,"pageTitle":"Widget","url":"/RetroBoxDocs/docs/api-class-reference/core/Widget#-widgetgetvalueself-typeswidget-name-string-unknown","content":" Returns the value of the Property.    ","version":"Next","tagName":"h3"},{"title":"> Widget.GetFusionValue(self: Types.Widget, name: string): Fusion.Value<unknown>​","type":1,"pageTitle":"Widget","url":"/RetroBoxDocs/docs/api-class-reference/core/Widget#-widgetgetfusionvalueself-typeswidget-name-string-fusionvalueunknown","content":" Returns the Fusion.Value&lt;any&gt; object of the Property.    ","version":"Next","tagName":"h3"},{"title":"> Widget.SetValue(self: Types.Widget, name: string, value: unknown): ()​","type":1,"pageTitle":"Widget","url":"/RetroBoxDocs/docs/api-class-reference/core/Widget#-widgetsetvalueself-typeswidget-name-string-value-unknown-","content":" Sets the value of the Property.    ","version":"Next","tagName":"h3"},{"title":"> Widget.HookFusionValue(self: Types.Widget, value: Fusion.Value<any>, propertyName: string): ()​","type":1,"pageTitle":"Widget","url":"/RetroBoxDocs/docs/api-class-reference/core/Widget#-widgethookfusionvalueself-typeswidget-value-fusionvalueany-propertyname-string-","content":" Hooks the fusion value to a specfic property allowing it effectively listening to changes and update accordingly.   ","version":"Next","tagName":"h3"},{"title":"debugPrint","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/functions/debugPrint","content":"debugPrint Prints a debug message if provided script has attribute Debug set to true. The following message will output when using this function. ServerScriptService/Server.server.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Functions] -- local debugPrint = require(Modules.Functions.debugPrint) debugPrint(script, &quot;Hello World!&quot;) -- Outputs: [Server]: Hello World! ","keywords":"","version":"Next"},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/RetroBoxDocs/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"Class","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/core/Class","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Class","url":"/RetroBoxDocs/docs/api-class-reference/core/Class#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> ClassData: number | 1 Public​","type":1,"pageTitle":"Class","url":"/RetroBoxDocs/docs/api-class-reference/core/Class#-classdata-number--1-public","content":" A dummy property.    ","version":"Next","tagName":"h3"},{"title":"> _Inherited: any Private​","type":1,"pageTitle":"Class","url":"/RetroBoxDocs/docs/api-class-reference/core/Class#-_inherited-any-private","content":" This property is used for look ups of the inherited data. Don't access it, this is used by metamethods!  ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"Class","url":"/RetroBoxDocs/docs/api-class-reference/core/Class#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> Class.new(...any)​","type":1,"pageTitle":"Class","url":"/RetroBoxDocs/docs/api-class-reference/core/Class#-classnewany","content":" ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class","url":"/RetroBoxDocs/docs/api-class-reference/core/Class#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> Class:IsA(className: string): boolean Public​","type":1,"pageTitle":"Class","url":"/RetroBoxDocs/docs/api-class-reference/core/Class#-classisaclassname-string-boolean-public","content":" Checks whether class is the specfic class type.    ","version":"Next","tagName":"h3"},{"title":"> Class:Destroy(): boolean Public​","type":1,"pageTitle":"Class","url":"/RetroBoxDocs/docs/api-class-reference/core/Class#-classdestroy-boolean-public","content":" Destroy's class and releases itself from the memory.  info This is just an Interface, you still have to implement clean up mechanism. ","version":"Next","tagName":"h3"},{"title":"bindToInstanceDestroyed","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/functions/bindToInstanceDestroyed","content":"bindToInstanceDestroyed When using Deferred signal mode: scripts parented to an object cannot listen to that object's Destroying event, since it is disconnected up before being executed. To avoid this, we'll use a hacky solution and clone a listener script into PlayerScripts. This script will continue running after the instance is destroyed and allow us to run e.g. cleanup code when it gets destroyed. Workspace/Model/ModelScript.server.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Functions] -- local debugPrint = require(Modules.Functions.debugPrint) -- [Instances] -- local model = script.Parent -- This will not run in Deffered mode, because script will be deleted before the Destroying event will be executed model.Destroying:Connect(function() print(&quot;Destroying callback&quot;) end) -- This will run no matter bindToInstanceDestroyed(model, function() print(&quot;bindToInstanceDestroye callback&quot;) end) model:Destroy() ","keywords":"","version":"Next"},{"title":"inheritClass","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/functions/inheritClass","content":"inheritClass Allows a Class (or any table with __index with cyclic reference) to inheritMethods and behavior from parent class that supports inheritence. note This only inherits the behavior, the created objects will not get the inherited behavior by default, you must use superClass function to get the inherited behavior and fields. -- [Packages] -- local Modules = game.ReplicatedStorage.Modules local inheritClass = require(Modules.Functions.inheritClass) -- [Class Definition] -- local MyClass = {} inheritClass(MyClass, Modules.Classes.Class, &quot;MyClass&quot;) -- Inherits the behavior return MyClass ","keywords":"","version":"Next"},{"title":"disconnectConnection","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/functions/disconnectConnection","content":"disconnectConnection Disconnects a RBXScriptConnection. The passed connection can be a nil value allowing to put this function in a code where you may not always have a RBXScriptConnection present. -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Functions] -- local disconnectConnection = require(Modules.Functions.disconnectConnection) local playerConnection = game.Players.LocalPlayer.CharacterAdded:Connect(function() print(&quot;Character Respawned&quot;) end) disconnectConnection(playerConnection) -- Will disconnect the connection disconnectConnection(nil) -- Will do nothing if nil is passed making this function nil safe ","keywords":"","version":"Next"},{"title":"BTreeCreator","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/BTreeCreator","content":"BTreeCreator Author: tyridge77 Official DevForum post BTreeCreator - module used for creating behavior tree's.","keywords":"","version":"Next"},{"title":"superClass","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/functions/superClass","content":"superClass Adds or supers the behaviors from the inherited Class table to the created object. -- [Packages] -- local Modules = game.ReplicatedStorage.Modules local inheritClass = require(Modules.Functions.inheritClass) -- [Class Definition] -- local MyClass = {} inheritClass(MyClass, Modules.Classes.Class, &quot;MyClass&quot;) -- Inherits the behavior function MyClass.new() local self = setmetatable({}, MyClass) superClass(self, MyClass) -- Supers the behavior allowing us to call parent methods return self end return MyClass ","keywords":"","version":"Next"},{"title":"FastCastRedux","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/FastCastRedux","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"FastCastRedux","url":"/RetroBoxDocs/docs/api-class-reference/general/FastCastRedux#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> FastCast:Fire(origin: Vector3, direction: Vector3, velocity: Vector3 | number, castDataPacket: FastCastBehavior?, preSimulation: number?) Static​","type":1,"pageTitle":"FastCastRedux","url":"/RetroBoxDocs/docs/api-class-reference/general/FastCastRedux#-fastcastfireorigin-vector3-direction-vector3-velocity-vector3--number-castdatapacket-fastcastbehavior-presimulation-number-static","content":" Fires a Caster. ","version":"Next","tagName":"h3"},{"title":"Fusion","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/Fusion","content":"Fusion Author: elltob Fusion - a declerative UI framework. Full documentation here.","keywords":"","version":"Next"},{"title":"BehaviorBuilder","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/BehaviorBuilder","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"BehaviorBuilder","url":"/RetroBoxDocs/docs/api-class-reference/general/BehaviorBuilder#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> BehaviorBuilder.InitNPC(npc: Model, behaviorTree: Folder, blackboard: {[string]: any}, agentSettings: PathPlus.AgentParameters?): Model Static​","type":1,"pageTitle":"BehaviorBuilder","url":"/RetroBoxDocs/docs/api-class-reference/general/BehaviorBuilder#-behaviorbuilderinitnpcnpc-model-behaviortree-folder-blackboard-string-any-agentsettings-pathplusagentparameters-model-static","content":" Creates a new behavior tree for the NPC.  ServerScriptService/BehaviorTreeNPCs.server.lua -- [Packages] -- local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local ServerStorage = game:GetService(&quot;ServerStorage&quot;) -- [Modules] -- local BehaviorBuilder = require(ReplicatedStorage.Modules.General.BehaviorBuilder) -- [Instances] -- local bossTemplate = ServerStorage.SpawnInstances.NPCs.Bosses:FindFirstChild(&quot;Noob CommanderV2&quot;) local behaviorTree = ServerStorage.Trees:FindFirstChild(&quot;Noob CommanderV2&quot; .. &quot;Tree&quot;) -- [Variables] -- local blackboard = { -- Initial BlackBoard State IsDead = false, Target = nil, AttackInUse = false, PhaseTwo = false, CurrentPhase = 1 } -- Initialize NPC with navigation parameters local npc = BehaviorBuilder.InitNPC( bossTemplate, behaviorTree, blackboard, { AgentRadius = 10, AgentHeight = 13, AgentCanJump = true, AgentCanClimb = false } )  ","version":"Next","tagName":"h3"},{"title":"Cmdr","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/Cmdr","content":"Cmdr Author: evaera Cmdr - fully extensible and type safe command console for Roblox developers. Great for admin commands, but does much more.Make commands that tie in specifically with your game systems.Intelligent autocompletion and instant validation.Run commands programmatically on behalf of the local user.Bind commands to user input.Secure: the client and server both validate input separately.Embedded commands: dynamically use the output of an inner command when running a command. Full documentation here.","keywords":"","version":"Next"},{"title":"AttackingAiSpawner","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Model: Model Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-model-model-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> Trove:  Trove.Trove Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-trove--trovetrove-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> PathPlus: PathPlus Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-pathplus-pathplus-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> Animator:  Animator Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-animator--animator-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> Module: unknown Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-module-unknown-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> Target: Instance? Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-target-instance-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> targetsPreviousPos: Vector3 Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-targetspreviouspos-vector3-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> _attackConnection: RBXScriptConnection Private​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-_attackconnection-rbxscriptconnection-private","content":"   ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> AAS.NewNpc(Model: Model, defaultSettings: PathPlus.AgentParameters, WhitelistPlayers : {any}?)​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-aasnewnpcmodel-model-defaultsettings-pathplusagentparameters-whitelistplayers--any","content":"   ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> AAS:Attack() Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-aasattack-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> AAS:StopAttack() Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-aasstopattack-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> AAS:Destroy() Public​","type":1,"pageTitle":"AttackingAiSpawner","url":"/RetroBoxDocs/docs/api-class-reference/general/AttackingAiSpawner#-aasdestroy-public","content":" Destroy's the AAS, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"Animator","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Character: Model Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-character-model-public","content":" Reference to Character model that is animated.    ","version":"Next","tagName":"h3"},{"title":"> Animator: Animator Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animator-animator-public","content":" Reference to Animator of the Character.    ","version":"Next","tagName":"h3"},{"title":"> CurrentAnimation: AnimationTrack Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-currentanimation-animationtrack-public","content":" Reference to a currently played animation track.    ","version":"Next","tagName":"h3"},{"title":"> AnimationRegistry: { [string]: AnimationTrack } Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animationregistry--string-animationtrack--public","content":" A registry which contains every loaded animation.    ","version":"Next","tagName":"h3"},{"title":"> AnimationIdRegistry: { [string]: string } Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animationidregistry--string-string--public","content":" A registry which contains every ID of loaded animation.    ","version":"Next","tagName":"h3"},{"title":"> Started: Signal.Signal<string> Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-started-signalsignalstring-public","content":" Fires whenever animation started playing through :Play() method of the AnimatorObj.    ","version":"Next","tagName":"h3"},{"title":"> Stopped: Signal.Signal<string> Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-stopped-signalsignalstring-public","content":" Fires whenever animation ended (but not interpolated to default position) it's playback or when :Stop() method is called.    ","version":"Next","tagName":"h3"},{"title":"> Ended: Signal.Signal<string> Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-ended-signalsignalstring-public","content":" Fires whenever animation completelly ended it's playback.    ","version":"Next","tagName":"h3"},{"title":"> MarkerReached: Signal.Signal<Player, string> Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-markerreached-signalsignalplayer-string-public","content":" Fires whenever marker is reached in the animation playback, allowing to bind specific behavior to the animation.    ","version":"Next","tagName":"h3"},{"title":"> SoundPlayed: Signal.Signal<Sound> Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-soundplayed-signalsignalsound-public","content":" Fires whenever sound was played in the animation playback, allowing to bind specific behavior to the animation.    ","version":"Next","tagName":"h3"},{"title":"> Destroying: Signal.Signal<nil> Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-destroying-signalsignalnil-public","content":" Fires whenever AnimatorObj is being destroyed via :Destroy() method.    ","version":"Next","tagName":"h3"},{"title":"> _trove: Trove.Trove Private​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-_trove-trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#constructor","content":" ","version":"Next","tagName":"h2"},{"title":"> Animator.new(character: Model, animations: { Animation })​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatornewcharacter-model-animations--animation-","content":"   ","version":"Next","tagName":"h3"},{"title":"Method​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#method","content":"   ","version":"Next","tagName":"h2"},{"title":"> Animator:GetCurrentAnimation(): AnimationTrack? Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatorgetcurrentanimation-animationtrack-public","content":" Returns currently played animation. May not return AnimationTrack if animation isn't playing.    ","version":"Next","tagName":"h3"},{"title":"> Animator:_loadAnimation(animation: Animation): boolean Private​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animator_loadanimationanimation-animation-boolean-private","content":" Loads the animation inside the AnimatorObj allowing it to be played via :Play().    ","version":"Next","tagName":"h3"},{"title":"> Animator:StopAll() Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatorstopall-public","content":" Stop's every animation that's currently playing in the AnimatorObj.    ","version":"Next","tagName":"h3"},{"title":"> Animator:Play(animationName: string) Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatorplayanimationname-string-public","content":" Play's the animation.    ","version":"Next","tagName":"h3"},{"title":"> Animator:Stop(animationName: string) Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatorstopanimationname-string-public","content":" Stop's the animation.    ","version":"Next","tagName":"h3"},{"title":"> Animator:ConnectMarkerReachedSignal(animationName: string, markerName: string, callback: () -> ()): RBXScriptConnection? Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatorconnectmarkerreachedsignalanimationname-string-markername-string-callback-----rbxscriptconnection-public","content":" Connects a function callback to the animation with the specified marker. May not return RBXScriptConnection if invalid names was passed.    ","version":"Next","tagName":"h3"},{"title":"> Animator:GetAnimation(animationName: string): AnimationTrack? Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatorgetanimationanimationname-string-animationtrack-public","content":" Returns the AnimationTrack. May not return AnimationTrack if invalid names was passed.    ","version":"Next","tagName":"h3"},{"title":"> Animator:GetAnimationAssetId(animationName: string): string? Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatorgetanimationassetidanimationname-string-string-public","content":" Returns the animation AssetId. May not return AssetId if invalid names was passed.    ","version":"Next","tagName":"h3"},{"title":"> Animator:IsPlaying(animationName: string): boolean Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatorisplayinganimationname-string-boolean-public","content":" Return boolean of whether animation is playing currently or not.    ","version":"Next","tagName":"h3"},{"title":"> Animator:AdjustSpeedAndPlay(animationName: string, speed: number) Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatoradjustspeedandplayanimationname-string-speed-number-public","content":" Play's the animation with the specified speed.    ","version":"Next","tagName":"h3"},{"title":"> Animator:Destroy() Public​","type":1,"pageTitle":"Animator","url":"/RetroBoxDocs/docs/api-class-reference/general/Animator#-animatordestroy-public","content":" Destroy's the AnimatorObj, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"FXReplicatorService","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/FXReplicatorService","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"FXReplicatorService","url":"/RetroBoxDocs/docs/api-class-reference/general/FXReplicatorService#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> FXReplicatorService.Init() Static​","type":1,"pageTitle":"FXReplicatorService","url":"/RetroBoxDocs/docs/api-class-reference/general/FXReplicatorService#-fxreplicatorserviceinit-static","content":" Initializes FXReplicatorService.    ","version":"Next","tagName":"h3"},{"title":"> FXReplicatorService.Replicate(MainPlayer: Player, ...) Static​","type":1,"pageTitle":"FXReplicatorService","url":"/RetroBoxDocs/docs/api-class-reference/general/FXReplicatorService#-fxreplicatorservicereplicatemainplayer-player--static","content":" Replicates the passed in data (Data: {ToolName: string, EffectName: string, ExtraData: any}).   ","version":"Next","tagName":"h3"},{"title":"Gear","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Tool: Tool Public​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-tool-tool-public","content":" Reference to a tool Gear object is binded to.    ","version":"Next","tagName":"h3"},{"title":"> Owner: Player Public​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-owner-player-public","content":" Reference to a owner of the tool.    ","version":"Next","tagName":"h3"},{"title":"> Character: Model Public​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-character-model-public","content":" Reference to a character of the owner.    ","version":"Next","tagName":"h3"},{"title":"> ClickLocation: Signal.Signal<CFrame> Public​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-clicklocation-signalsignalcframe-public","content":" Fires whenever player clicks while tool is equipped.    ","version":"Next","tagName":"h3"},{"title":"> _trove: Trove.Trove Private​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-_trove-trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _animator: Animator.AnimatorObj Private​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-_animator-animatoranimatorobj-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _mouse: Mouse.Mouse Private​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-_mouse-mousemouse-private","content":"   ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> Gear:IsEquipped(): boolean Public​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-gearisequipped-boolean-public","content":" Returns boolean of whether tool is equipped or not.    ","version":"Next","tagName":"h3"},{"title":"> Gear:_setupAnimations() Private​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-gear_setupanimations-private","content":" Setups the animations and behaviors for the tool.    ","version":"Next","tagName":"h3"},{"title":"> Gear:Destroy()​","type":1,"pageTitle":"Gear","url":"/RetroBoxDocs/docs/api-class-reference/general/Gear#-geardestroy","content":" Destroy's the Gear, releasing it from memory. ","version":"Next","tagName":"h3"},{"title":"Replica","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/Replica","content":"Replica Author: loleris Official DevForum post Replica - server to client state replication module. Full documentation here.","keywords":"","version":"Next"},{"title":"PhysicsProjectile","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/PhysicsProjectile","content":"PhysicsProjectile","keywords":"","version":"Next"},{"title":"SoundReplicator","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"SoundReplicator","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> AudioFolder: Folder?​","type":1,"pageTitle":"SoundReplicator","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator#-audiofolder-folder","content":"   ","version":"Next","tagName":"h3"},{"title":"> AudioCache: { [string]: boolean }​","type":1,"pageTitle":"SoundReplicator","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator#-audiocache--string-boolean-","content":"   ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"SoundReplicator","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> SoundReplicator.SetAudioFolder(folder: Folder) Static Server​","type":1,"pageTitle":"SoundReplicator","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator#-soundreplicatorsetaudiofolderfolder-folder-static-server","content":"   ","version":"Next","tagName":"h3"},{"title":"> SoundReplicator.GetAudioFolder(): Folder? Static Server​","type":1,"pageTitle":"SoundReplicator","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator#-soundreplicatorgetaudiofolder-folder-static-server","content":"   ","version":"Next","tagName":"h3"},{"title":"> SoundReplicator.PlaySound2DAll(sound: Sound | string, volume: number?) Static Server​","type":1,"pageTitle":"SoundReplicator","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator#-soundreplicatorplaysound2dallsound-sound--string-volume-number-static-server","content":"   ","version":"Next","tagName":"h3"},{"title":"> SoundReplicator.PlaySound3D(player: Player, sound: Sound | string, target: BasePart | Vector3, volume: number?, rollOffMaxDistance: number?, rollOffMinDistance: number?, rollOffMode: Enum.RollOffMode?) Static Server​","type":1,"pageTitle":"SoundReplicator","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator#-soundreplicatorplaysound3dplayer-player-sound-sound--string-target-basepart--vector3-volume-number-rolloffmaxdistance-number-rolloffmindistance-number-rolloffmode-enumrolloffmode-static-server","content":"   ","version":"Next","tagName":"h3"},{"title":"> SoundReplicator.PlaySound3DAll(sound: Sound | string, target: BasePart | Vector3, volume: number?, rollOffMaxDistance: number?, rollOffMinDistance: number?, rollOffMode: Enum.RollOffMode?) Static Server​","type":1,"pageTitle":"SoundReplicator","url":"/RetroBoxDocs/docs/api-class-reference/general/SoundReplicator#-soundreplicatorplaysound3dallsound-sound--string-target-basepart--vector3-volume-number-rolloffmaxdistance-number-rolloffmindistance-number-rolloffmode-enumrolloffmode-static-server","content":"  ","version":"Next","tagName":"h3"},{"title":"PlayerManager","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Amount: number​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#-amount-number","content":" Current amount of players on server.    ","version":"Next","tagName":"h3"},{"title":"> List: {[string]: Player}​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#-list-string-player","content":" Array of players on server.    ","version":"Next","tagName":"h3"},{"title":"> PlayerAdded: Signal.Signal<Player>​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#-playeradded-signalsignalplayer","content":" Fires when player joins the server.    ","version":"Next","tagName":"h3"},{"title":"> PlayerRemoving: Signal.Signal<Player>​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#-playerremoving-signalsignalplayer","content":" Fires when player leaves the server.    ","version":"Next","tagName":"h3"},{"title":"> GearAdded: Signal.Signal<Player, Tool>​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#-gearadded-signalsignalplayer-tool","content":" Fires when gear is added to players backpack.    ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> PlayerList.GetArray(): {Player} Static​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#-playerlistgetarray-player-static","content":" Returns an array of players (ordering is not guarenteed).    ","version":"Next","tagName":"h3"},{"title":"> PlayerList.GetCharacters(): {Model} Static​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#-playerlistgetcharacters-model-static","content":" Returns an array of characters (ordering is not guarenteed).    ","version":"Next","tagName":"h3"},{"title":"> PlayerList.GetRandomPlayer(): Player Static​","type":1,"pageTitle":"PlayerManager","url":"/RetroBoxDocs/docs/api-class-reference/general/PlayerManager#-playerlistgetrandomplayer-player-static","content":" Gets a random player on the server.   ","version":"Next","tagName":"h3"},{"title":"Ragdollify","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#properties","content":" ","version":"Next","tagName":"h2"},{"title":"> Character: Model Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-character-model-public","content":" Reference to character who will be ragdolled.    ","version":"Next","tagName":"h3"},{"title":"> Humanoid: Humanoid Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-humanoid-humanoid-public","content":" Reference to humanoid of the character.    ","version":"Next","tagName":"h3"},{"title":"> Player: Player? Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-player-player-public","content":" Reference to a player. May be nil of ragdoll was created on the NPC.    ","version":"Next","tagName":"h3"},{"title":"> Unragdolled: Signal.Signal<nil> Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-unragdolled-signalsignalnil-public","content":" Fires when :Unragdoll() is called.    ","version":"Next","tagName":"h3"},{"title":"> Ragdolled: Signal.Signal<nil> Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-ragdolled-signalsignalnil-public","content":" Fires when :Ragdoll() is called.    ","version":"Next","tagName":"h3"},{"title":"> Touched: Signal.Signal<BasePart> Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-touched-signalsignalbasepart-public","content":" Fires when ragdoll's body part touches new part.    ","version":"Next","tagName":"h3"},{"title":"> TouchEnded: Signal.Signal<BasePart> Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-touchended-signalsignalbasepart-public","content":" Fires when ragdoll's body part stop's touching touched part.    ","version":"Next","tagName":"h3"},{"title":"> _trove: Trove.Trove Private​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-_trove-trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _unragdollTimer: Timer.Timer Private​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-_unragdolltimer-timertimer-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _torso: BasePart Private​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-_torso-basepart-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _isRagdoll: BoolValue Private​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-_isragdoll-boolvalue-private","content":"   ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> Ragdollify.new(character: Model)​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-ragdollifynewcharacter-model","content":" ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> Ragdollify:Ragdoll() Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-ragdollifyragdoll-public","content":" Forces character enter ragdoll.    ","version":"Next","tagName":"h3"},{"title":"> Ragdollify:Unragdoll(unragdollOnTouch: boolean?, timeout: number?) Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-ragdollifyunragdollunragdollontouch-boolean-timeout-number-public","content":" Forces character exit ragdoll.    ","version":"Next","tagName":"h3"},{"title":"> Ragdollify:IsRagdolled(): boolean Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-ragdollifyisragdolled-boolean-public","content":" Returns boolean of whether character in ragdoll state.    ","version":"Next","tagName":"h3"},{"title":"> Ragdollify:_attachListener() Private​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-ragdollify_attachlistener-private","content":" Attaches collision listeners to the characters body part for tracking collisions of the character.    ","version":"Next","tagName":"h3"},{"title":"> Ragdollify:_replaceJoints() Private​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-ragdollify_replacejoints-private","content":" Replaces every single bone (Motor6D) inside Character.    ","version":"Next","tagName":"h3"},{"title":"> Ragdollify:_resetJoints() Private​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-ragdollify_resetjoints-private","content":" Destroys all Ragdoll made instances and re-enables the Motor6D's.    ","version":"Next","tagName":"h3"},{"title":"> Ragdollify:Destroy() Public​","type":1,"pageTitle":"Ragdollify","url":"/RetroBoxDocs/docs/api-class-reference/general/Ragdollify#-ragdollifydestroy-public","content":" Destroy's the Ragdoll, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"StunPlayer","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/StunPlayer","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"StunPlayer","url":"/RetroBoxDocs/docs/api-class-reference/general/StunPlayer#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> StunPlayer.Stun(Duration: number) Static Client​","type":1,"pageTitle":"StunPlayer","url":"/RetroBoxDocs/docs/api-class-reference/general/StunPlayer#-stunplayerstunduration-number-static-client","content":" Stuns player character for specific duration (gently breaks your knees and heals them back).    ","version":"Next","tagName":"h3"},{"title":"> StunPlayer.PermanentStun() Static Client​","type":1,"pageTitle":"StunPlayer","url":"/RetroBoxDocs/docs/api-class-reference/general/StunPlayer#-stunplayerpermanentstun-static-client","content":" Stuns player character permanently (makes you basically a disabled person in a wheelchair).    ","version":"Next","tagName":"h3"},{"title":"> StunPlayer.Unstun() Static Client​","type":1,"pageTitle":"StunPlayer","url":"/RetroBoxDocs/docs/api-class-reference/general/StunPlayer#-stunplayerunstun-static-client","content":" Unstuns player character by giving character legs back.   ","version":"Next","tagName":"h3"},{"title":"Network","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/core/Network","content":"","keywords":"","version":"Next"},{"title":"Constructor​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> Network.new(): Types.Network Public​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networknew-typesnetwork-public","content":" Creates a new Network object that allows Server/Client communication.  -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) local Remotes = require(script.Remotes) local network = Network.new() -- Create new Network object for k, v in Remotes do if type(v) ~= &quot;string&quot; then continue end network:CreateRemote(v, Remotes.SetupRemotes[k]) -- Create new Remote communication bridge end network:Destroy() -- Destroy it (note: Remotes that were created are persistent)   ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> Network.CreateRemote(self: Types.Network, remoteName: string, conf: any?): () Public Server Client​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networkcreateremoteself-typesnetwork-remotename-string-conf-any--public-server-client","content":" Creates a new Remote communication bridge.  -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) network:CreateRemote(&quot;Egg&quot;) -- Create &quot;Egg&quot; Remote     ","version":"Next","tagName":"h3"},{"title":"> Network.ConnectRemote(self: Types.Network, remoteName: string, callback: (...any) -> ()): string Public Server Client​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networkconnectremoteself-typesnetwork-remotename-string-callback-any----string-public-server-client","content":" Connects a function callback to a specified remote.  -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) -- [Objects] -- local network = Network.new() -- Connect to a &quot;Egg&quot; Remote (note: Remote must exists prior to trying connecting function callback to it) network:ConnectRemote(&quot;Egg&quot;, function(name) print(&quot;My name is:&quot;, name) end)     ","version":"Next","tagName":"h3"},{"title":"> Network.ConvertConnectionLike(self: Types.Network, remoteName: string, key: string): Types.ConnectionLike Public Server Client​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networkconvertconnectionlikeself-typesnetwork-remotename-string-key-string-typesconnectionlike-public-server-client","content":" Converts a connection ID to a ConnectionLike Object. This is usefull for automatic memory clean up when :Destroy() method is called.  -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) local Trove = require(Modules.Utility.Trove) -- [Objects] -- local network = Network.new() local trove = Trove.new() -- Add the connection to trove trove:Add(network:ConvertConnectionLike(&quot;Egg&quot;, network:ConnectRemote(&quot;Egg&quot;, function(name) print(&quot;My name is:&quot;, name) end))) trove:Destroy() -- Destroying trove will disconnect the Remote connection which will release memory     ","version":"Next","tagName":"h3"},{"title":"> Network.DisconnectRemote(self: Types.Network, remoteName: string, key: string): () Public Server Client​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networkdisconnectremoteself-typesnetwork-remotename-string-key-string--public-server-client","content":" Disconnects a function callback from a remote with specified connection ID.  -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) -- [Objects] -- local network = Network.new() -- connection variable will store our ID connection local connection = network:ConnectRemote(&quot;Egg&quot;, function(isEgg: boolean) -- Assuming you have the &quot;Egg&quot; remote already print(&quot;IsEgg&quot;, isEgg) end) network:DisconnectRemote(&quot;Egg&quot;, connection) -- Effectively disconnects a function callback from the remote     ","version":"Next","tagName":"h3"},{"title":"> Network.FireRemote(self: Types.Network, remoteName: string, reliable: boolean, player: Player | nil, ...: any): () Public Server Client​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networkfireremoteself-typesnetwork-remotename-string-reliable-boolean-player-player--nil--any--public-server-client","content":" Sends data to a specified remote to a specific player or server. \\  note Data will be compressed to reduce latency, but buffer objects can't be passed.  ServerScriptService/Server.server.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) -- [Objects] -- local network = Network.new() network:CreateRemote(&quot;Egg&quot;) -- You must declare &quot;Egg&quot; remote both on server/client network:ConnectRemote(&quot;Egg&quot;, function(isEgg: boolean) print(&quot;IsEgg&quot;, isEgg) end)   StarterPlayer/StarterPlayerScripts/Client.client.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) -- [Objects] -- local network = Network.new() network:CreateRemote(&quot;Egg&quot;) -- You must declare &quot;Egg&quot; remote both on server/client while task.wait(1) do network:FireRemote(&quot;Egg&quot;, true, nil, math.random() &gt; 0.5) -- On client side we can't pass a Player to FireRemote() so we have to use nil end     ","version":"Next","tagName":"h3"},{"title":"> Network.FiresRemote(self: Types.Network, remoteName: string, reliable: boolean, ...: any): () Public Server​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networkfiresremoteself-typesnetwork-remotename-string-reliable-boolean--any--public-server","content":" Sends data to all players on the server.  ServerScriptService/Server.server.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) -- [Objects] -- local network = Network.new() network:CreateRemote(&quot;Egg&quot;) -- You must declare &quot;Egg&quot; remote both on server/client network:FiresRemote(&quot;Egg&quot;, true, &quot;I'm the Egg!&quot;)     ","version":"Next","tagName":"h3"},{"title":"> Network.FireExceptRemote(self: Types.Network, remoteName: string, reliable: boolean, except: {Player}, ...: any): () Public Server​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networkfireexceptremoteself-typesnetwork-remotename-string-reliable-boolean-except-player--any--public-server","content":" Sends data to all players, but filters out certain players if they are in the except filer.  ServerScriptService/Server.server.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) -- [Services] -- local Players = game:GetService(&quot;Players&quot;) -- [Objects] -- local network = Network.new() network:CreateRemote(&quot;Egg&quot;) -- You must declare &quot;Egg&quot; remote both on server/client network:FireRemoteExcept(&quot;Egg&quot;, true, { Players:GetPlayers()[math.random(1, #Players:GetPlayers())] } &quot;I'm the Egg!&quot;) -- A random player will not receive this message     ","version":"Next","tagName":"h3"},{"title":"> Network.Invoke(self: Types.Network, remoteName: string, timeout: number, player: Player, ...: any): (...any) Public Server​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networkinvokeself-typesnetwork-remotename-string-timeout-number-player-player--any-any-public-server","content":" Invokes Server/Client waiting for it to return a value  warning This method Yields!  ServerScriptService/Server.server.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) -- [Objects] -- local network = Network.new() network:CreateRemote(&quot;Egg&quot;) -- You must declare &quot;Egg&quot; remote both on server/client local player = Players:GetPlayers()[math.random(1, #Players:GetPlayers())] local result = network:Invoke(&quot;Egg&quot;, 60, player) -- Thread will yield here print(&quot;IsEgg&quot;, result)   StarterPlayer/StarterPlayerScripts/Client.client.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Network = require(Modules.Classes.Network) -- [Objects] -- local network = Network.new() network:CreateRemote(&quot;Egg&quot;) -- You must declare &quot;Egg&quot; remote both on server/client network:ConnectRemote(&quot;Egg&quot;, function() return math.random() &gt; 0.5 end)     ","version":"Next","tagName":"h3"},{"title":"> Network.Destroy(self: Types.Network): () Public​","type":1,"pageTitle":"Network","url":"/RetroBoxDocs/docs/api-class-reference/core/Network#-networkdestroyself-typesnetwork--public","content":" Destroy's the Network object releasing it from memory.  info Remotes that were created in the network objects lifespan are persistant. ","version":"Next","tagName":"h3"},{"title":"Warp","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/Warp","content":"Warp Author: imezx Warp - very-fast &amp; powerful networking library for Roblox. ⚡ Performance Warp is very-fast with much less bandwidth compared to native. 🍃 Lightweight Warp is a lightweight library for Roblox. 📊 Task Warp optimized efficient for large-scale task. 🔎 Typing Warp written with strictly-typed. Full documentation here.","keywords":"","version":"Next"},{"title":"Throwable","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Configuration: ThrowableConfiguration​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-configuration-throwableconfiguration","content":" Reference to ThrowableConfiguration instance.    ","version":"Next","tagName":"h3"},{"title":"> Tool: Tool Public​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-tool-tool-public","content":" Reference to a tool.    ","version":"Next","tagName":"h3"},{"title":"> Owner: Player Public​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-owner-player-public","content":" Reference to the owner of the tool.    ","version":"Next","tagName":"h3"},{"title":"> Character: Model Public​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-character-model-public","content":" Reference to the owner's character.    ","version":"Next","tagName":"h3"},{"title":"> ManualActivation: boolean Public​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-manualactivation-boolean-public","content":" Sets whether .Activated event will be triggered by default or not. If you want to trigger the event use :Activate()    ","version":"Next","tagName":"h3"},{"title":"> Threw: Signal.Signal<BasePart> Public​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-threw-signalsignalbasepart-public","content":" Fires whenever throwable instance is thrown.    ","version":"Next","tagName":"h3"},{"title":"> Destroying: Signal.Signal<nil> Public​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-destroying-signalsignalnil-public","content":" Fires whenever throwable is getting destroyed via :Destroy()    ","version":"Next","tagName":"h3"},{"title":"> _direction: Vector3 Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-_direction-vector3-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _visible: boolean Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-_visible-boolean-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _trove: Trove.Trove Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-_trove-trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _boneBuilder: BoneBuilder.BoneBuilder Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-_bonebuilder-bonebuilderbonebuilder-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _animator: any Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-_animator-any-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _throwableInstance: any Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-_throwableinstance-any-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _objectPool: { any } Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-_objectpool--any--private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _cooldown: Timer.Timer Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-_cooldown-timertimer-private","content":"   ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> Throwable.new(tool: Tool, throwable: any, animations: { Animation })​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-throwablenewtool-tool-throwable-any-animations--animation-","content":" ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> Throwable.Throw(self: Types.Throwable, direction: Vector3) Public​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-throwablethrowself-typesthrowable-direction-vector3-public","content":" Forces character to throw the throwable instance.    ","version":"Next","tagName":"h3"},{"title":"> Throwable._throw(self: Types.Throwable, direction: Vector3) Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-throwable_throwself-typesthrowable-direction-vector3-private","content":" Actually throws the instance.    ","version":"Next","tagName":"h3"},{"title":"> Throwable._createHandleBone(self: Types.Throwable) Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-throwable_createhandleboneself-typesthrowable-private","content":" Creates a handle bone for proper animations.    ","version":"Next","tagName":"h3"},{"title":"> Throwable._setupAnimations(self: Types.Throwable) Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-throwable_setupanimationsself-typesthrowable-private","content":" Setups and binds the appropriate animation behavior to tool.    ","version":"Next","tagName":"h3"},{"title":"> Throwable._initializeObjectPool(self: Types.Throwable) Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-throwable_initializeobjectpoolself-typesthrowable-private","content":" Initializes the object pool for throwable instances.    ","version":"Next","tagName":"h3"},{"title":"> Throwable._acquire(self: Types.Throwable): any Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-throwable_acquireself-typesthrowable-any-private","content":" Acquires instance from the object pool.    ","version":"Next","tagName":"h3"},{"title":"> Throwable._return(self: Types.Throwable, instance: any) Private​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-throwable_returnself-typesthrowable-instance-any-private","content":" Returns instance from the object pool.    ","version":"Next","tagName":"h3"},{"title":"> Throwable.Destroy(self: Types.Throwable) Public​","type":1,"pageTitle":"Throwable","url":"/RetroBoxDocs/docs/api-class-reference/general/Throwable#-throwabledestroyself-typesthrowable-public","content":" Destroy's the Throwable, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"PathPlus","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus","content":"","keywords":"","version":"Next"},{"title":"Types​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#types","content":"   type AgentParameters = { AgentRadius: number?, AgentHeight: number?, AgentCanJump: boolean?, AgentCanClimb: boolean?, WaypointSpacing: number?, Costs: { [string]: number }?, }   For more info what each parameter does, go to Roblox documentation here.  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#properties","content":" ","version":"Next","tagName":"h2"},{"title":"> Visualize: boolean Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-visualize-boolean-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> OutputErrors: boolean Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-outputerrors-boolean-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> StuckThreshold: number Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-stuckthreshold-number-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> StuckTimeout: number Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-stucktimeout-number-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> DistanceThreshold: number Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-distancethreshold-number-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> WaypointReached: Signal.Signal<PathWaypoint> Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-waypointreached-signalsignalpathwaypoint-public","content":" Fires when reached waypoint.    ","version":"Next","tagName":"h3"},{"title":"> DestinationReached: Signal.Signal<nil> Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-destinationreached-signalsignalnil-public","content":" Fires when destination reached.    ","version":"Next","tagName":"h3"},{"title":"> Blocked: Signal.Signal<Instance?> Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-blocked-signalsignalinstance-public","content":" Fires when path was blocked.    ","version":"Next","tagName":"h3"},{"title":"> Stucked: Signal.Signal<nil> Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-stucked-signalsignalnil-public","content":" Fires when agent gets stuck.    ","version":"Next","tagName":"h3"},{"title":"> _moveToFinished: Signal.Signal<> Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_movetofinished-signalsignal-private","content":" Fires when humanoid finished moving to a specific point.    ","version":"Next","tagName":"h3"},{"title":"> _computationSuccess: boolean Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_computationsuccess-boolean-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _moving: boolean Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_moving-boolean-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _nextWaypointIndex: number Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_nextwaypointindex-number-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _lastPosition: Vector3 Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_lastposition-vector3-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _lastDestination: Vector3 Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_lastdestination-vector3-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _waypoints: { PathWaypoint } Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_waypoints--pathwaypoint--private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _connections: { [string]: RBXScriptConnection } Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_connections--string-rbxscriptconnection--private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _visualWaypoints: { Part } Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_visualwaypoints--part--private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _humanoid: Humanoid Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_humanoid-humanoid-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _humanoidRootPart: Part Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_humanoidrootpart-part-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _character: Model Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_character-model-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _stuckTimer: any Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_stucktimer-any-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _path: Path Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_path-path-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _trove: Trove.Trove Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-_trove-trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> PathPlus.new(character: Model, agentParameters: AgentParameters?)​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-pathplusnewcharacter-model-agentparameters-agentparameters","content":" ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> PathPlus.IsMoving(self: Pathfinder): boolean Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-pathplusismovingself-pathfinder-boolean-public","content":" Returns boolean of whether agent is moving or not.    ","version":"Next","tagName":"h3"},{"title":"> PathPlus.Compute(self: Pathfinder, target: BasePart | Vector3) Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-pathpluscomputeself-pathfinder-target-basepart--vector3-public","content":" Computes path asynchronously to the target.    ","version":"Next","tagName":"h3"},{"title":"> PathPlus._update(self: Pathfinder) Private​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-pathplus_updateself-pathfinder-private","content":" Update function to check for stuck behavior.    ","version":"Next","tagName":"h3"},{"title":"> PathPlus.MoveToNextWaypoint(self: Pathfinder) Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-pathplusmovetonextwaypointself-pathfinder-public","content":" Moves the agent to the next waypoint of the path.    ","version":"Next","tagName":"h3"},{"title":"> PathPlus.Stop(self: Pathfinder, stopMovement: boolean?) Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-pathplusstopself-pathfinder-stopmovement-boolean-public","content":" Stop the agent from advancing the path forward.    ","version":"Next","tagName":"h3"},{"title":"> PathPlus.Destroy(self: Pathfinder) Public​","type":1,"pageTitle":"PathPlus","url":"/RetroBoxDocs/docs/api-class-reference/general/PathPlus#-pathplusdestroyself-pathfinder-public","content":" Destroy's the PathPlus, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"CharacterBuilder","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterBuilder","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"CharacterBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterBuilder#methods","content":" ","version":"Next","tagName":"h2"},{"title":"> CharacterBuilder.GetCharacterCopyR6(player: Player) Static​","type":1,"pageTitle":"CharacterBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterBuilder#-characterbuildergetcharactercopyr6player-player-static","content":" Returns Character model as R6 rig.  warning This method Yields!    ","version":"Next","tagName":"h3"},{"title":"> CharacterBuilder.GetCharacterCopy(player: Player) Static​","type":1,"pageTitle":"CharacterBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterBuilder#-characterbuildergetcharactercopyplayer-player-static","content":" Returns Character model player currently has (not in-game, but on the website).  warning This method Yields!   ","version":"Next","tagName":"h3"},{"title":"ToolController","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/general/ToolController","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"ToolController","url":"/RetroBoxDocs/docs/api-class-reference/general/ToolController#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> ToolController.createServerTool(tool: Tool) Static​","type":1,"pageTitle":"ToolController","url":"/RetroBoxDocs/docs/api-class-reference/general/ToolController#-toolcontrollercreateservertooltool-tool-static","content":" ","version":"Next","tagName":"h3"},{"title":"Return new ServerTool.​","type":1,"pageTitle":"ToolController","url":"/RetroBoxDocs/docs/api-class-reference/general/ToolController#return-new-servertool","content":" ","version":"Next","tagName":"h2"},{"title":"> ToolController.createClientTool(tool: Tool) Static​","type":1,"pageTitle":"ToolController","url":"/RetroBoxDocs/docs/api-class-reference/general/ToolController#-toolcontrollercreateclienttooltool-tool-static","content":" ","version":"Next","tagName":"h3"},{"title":"Return new ClientTool.​","type":1,"pageTitle":"ToolController","url":"/RetroBoxDocs/docs/api-class-reference/general/ToolController#return-new-clienttool","content":"","version":"Next","tagName":"h2"},{"title":"BoneBuilder","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder","content":"","keywords":"","version":"Next"},{"title":"Types​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#types","content":"   type InstancePath = { Path: string, Root: Instance?, }   type BoneParams = { Name: string, Part0: Instance | InstancePath, Part1: Instance | InstancePath, C0: CFrame, C1: CFrame, Parent: Instance, }   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Character: Model Public​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#-character-model-public","content":" Reference to a binded Character model.    ","version":"Next","tagName":"h3"},{"title":"> _trove:  Trove.Trove Private​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#-_trove--trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _managedBones: { [string]: Motor6D } Private​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#-_managedbones--string-motor6d--private","content":"   ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> BoneBuilder.new(character: Character)​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#-bonebuildernewcharacter-character","content":" ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> BoneBuilder:GetCharacter(): Model Public​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#-bonebuildergetcharacter-model-public","content":" Returns a reference to a binded Character model.    ","version":"Next","tagName":"h3"},{"title":"> BoneBuilder:CreateBone(params: BoneParams): Motor6D Public​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#-bonebuildercreateboneparams-boneparams-motor6d-public","content":" Creates a bone with specified params.  StarterPlayer/StarterCharacterScripts/Boner.client.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local BoneBuilder = require(Modules.Utility.BoneBuilder) -- [Instances] -- local character = script.Parent -- [Objects] -- local boneBuilder = BoneBuilder.new(character) boneBuilder:CreateBone({ Name = &quot;Handle&quot;, Part0 = { Path = &quot;Torso&quot; }, -- Torso Part1 = { Path = &quot;Left Arm&quot; }, -- Handle C0 = CFrame.new(), C1 = CFrame.new(), Parent = { Path = &quot;Torso&quot; }, })     ","version":"Next","tagName":"h3"},{"title":"> BoneBuilder:GetBone(name: string): Motor6D? Public​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#-bonebuildergetbonename-string-motor6d-public","content":" Returns the Motor6D instance by name that was refered in BoneParams Name field.    ","version":"Next","tagName":"h3"},{"title":"> BoneBuilder:RemoveBone(name: string) Public​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#-bonebuilderremovebonename-string-public","content":" Destroy's the Motor6D from the character.    ","version":"Next","tagName":"h3"},{"title":"> BoneBuilder:Destroy(): () Public​","type":1,"pageTitle":"BoneBuilder","url":"/RetroBoxDocs/docs/api-class-reference/utility/BoneBuilder#-bonebuilderdestroy--public","content":" Destroy's the BoneBuilder, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"Component","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Component","content":"Component Bind components to Roblox instances using the Component class and CollectionService tags. To avoid confusion of terms: Component refers to this module.Component Class (e.g. MyComponent through this documentation) refers to a class created via Component.newComponent Instance refers to an instance of a component class.Roblox Instance refers to the Roblox instance to which the component instance is bound. Methods and properties are tagged with the above terms to help clarify the level at which they are used. Full documentation can be found here.","keywords":"","version":"Next"},{"title":"Caster","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster","content":"","keywords":"","version":"Next"},{"title":"Types​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#types","content":"   type Config = { DisplayLimit: number?, Lifetime: number?, Color: Color3?, WorldRoot: WorldRoot?, Persitent: boolean?, Visualize: boolean?, }   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> DisplayLimit: number Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-displaylimit-number-public","content":" Limits the amount of visible debug ray's at once. Oldest debug ray's will be deleted.    ","version":"Next","tagName":"h3"},{"title":"> Lifetime: number Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-lifetime-number-public","content":" Determines how long will debug ray live, before being deleted.    ","version":"Next","tagName":"h3"},{"title":"> Color: Color3 Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-color-color3-public","content":" Determines debug ray color.    ","version":"Next","tagName":"h3"},{"title":"> WorldRoot: WorldRoot Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-worldroot-worldroot-public","content":" Determines debug ray WorldRoot (usefull if you have WorldRoot that is not Workspace)    ","version":"Next","tagName":"h3"},{"title":"> Persitent: boolean Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-persitent-boolean-public","content":" Determines whether debug ray's are persistent or not.    ","version":"Next","tagName":"h3"},{"title":"> Visualize: boolean Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-visualize-boolean-public","content":" Determines whether debug ray's are visible or not.    ","version":"Next","tagName":"h3"},{"title":"> _persistentParts: { Line: Part?, Sphere: Part?, Block: Part? } Private​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-_persistentparts--line-part-sphere-part-block-part--private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _trove:  Trove.Trove Private​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-_trove--trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#constructor","content":" ","version":"Next","tagName":"h2"},{"title":"> Caster.new(config: Config?)​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-casternewconfig-config","content":" ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#methods","content":" ","version":"Next","tagName":"h2"},{"title":"> Caster:_updatePersistent(casterType: string, part: Part) Private​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-caster_updatepersistentcastertype-string-part-part-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> Caster:_storeInfo(target: Part, result: RaycastResult): () Private​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-caster_storeinfotarget-part-result-raycastresult--private","content":"   ","version":"Next","tagName":"h3"},{"title":"> Caster:Raycast(origin: Vector3, direction: Vector3, raycastParams: RaycastParams?): RaycastResult? Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-casterraycastorigin-vector3-direction-vector3-raycastparams-raycastparams-raycastresult-public","content":" Casts a raycasts.    ","version":"Next","tagName":"h3"},{"title":"> Caster:Spherecast(origin: Vector3, radius: number, direction: Vector3, raycastParams: RaycastParams?): RaycastResult? Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-casterspherecastorigin-vector3-radius-number-direction-vector3-raycastparams-raycastparams-raycastresult-public","content":" Casts a spherecast.    ","version":"Next","tagName":"h3"},{"title":"> Caster:Blockcast(cframe: CFrame, size: Vector3, direction: Vector3, raycastParams: RaycastParams?): RaycastResult? Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-casterblockcastcframe-cframe-size-vector3-direction-vector3-raycastparams-raycastparams-raycastresult-public","content":" Casts a blockcast.    ","version":"Next","tagName":"h3"},{"title":"> Caster:Destroy() Public​","type":1,"pageTitle":"Caster","url":"/RetroBoxDocs/docs/api-class-reference/utility/Caster#-casterdestroy-public","content":" Destroy's the Caster, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"MouseModule","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> collisionGroup: string​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-collisiongroup-string","content":" Represents in which collision group mouse will test collision.    ","version":"Next","tagName":"h3"},{"title":"> filterDescendants: { any }​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-filterdescendants--any-","content":" An array of instance that will be filtered when performing collision test depending what filerType was set.    ","version":"Next","tagName":"h3"},{"title":"> filterType: Enum.RaycastFilterType​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-filtertype-enumraycastfiltertype","content":" Sets the filtering behavior for filterDescendants property.    ","version":"Next","tagName":"h3"},{"title":"> rayLenght: number​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-raylenght-number","content":" Sets the lenght of how far mouse can test the collision.    ","version":"Next","tagName":"h3"},{"title":"> currentPosition: Vector2​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-currentposition-vector2","content":" Current position of the mouse on a screen.    ","version":"Next","tagName":"h3"},{"title":"> previousPosition: Vector2​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-previousposition-vector2","content":" Previous position of the mouse on a screen.    ","version":"Next","tagName":"h3"},{"title":"> ticks: number​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-ticks-number","content":" Last time when mouse was updated.    ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> Mouse.new()​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousenew","content":" ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> Mouse:GetViewSize(): Vector2​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegetviewsize-vector2","content":" Returns the viewport size in which mouse operates.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:GetPosition(): Vector3​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegetposition-vector3","content":" Returns the current position of the mouse on the screen.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:GetUnitRay(): Ray​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegetunitray-ray","content":" Returns the Ray of the mouse.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:GetOrigin(): Vector3​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegetorigin-vector3","content":" Returns the mouse origin in 3D world.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:GetDelta(): Vector3​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegetdelta-vector3","content":" Returns the mouse delta position.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:ScreenPointToRay(): RaycastParameters​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousescreenpointtoray-raycastparameters","content":"   ","version":"Next","tagName":"h3"},{"title":"> Mouse:CastRay()​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousecastray","content":" Casts a raycast in 3D world based on mouse position.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:GetHit(): Vector3​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegethit-vector3","content":" Returns the position what mouse is hitting in 3D world.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:GetTarget()​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegettarget","content":" Returns what mouse is hitting in 3D world.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:GetTargetFilter()​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegettargetfilter","content":" Returns mouse's filterDescendants.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:SetCollisionGroup(groupName: string)​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousesetcollisiongroupgroupname-string","content":" Sets the mouse's collision group to operate in.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:SetTargetFilter(object: Instance | {Instance})​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousesettargetfilterobject-instance--instance","content":" Sets the mouse's filterDescendants. You can pass Instance or an array of Instances.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:GetRayLength()​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegetraylength","content":" Returns the lenght of the mouse ray.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:SetRayLength(length: number)​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousesetraylengthlength-number","content":" Sets the lenght of the mouse ray.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:GetFilterType(): Enum.RaycastFilterType​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousegetfiltertype-enumraycastfiltertype","content":" Returns mouse's RaycastFilterType.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:SetFilterType(filterType: Enum.RaycastFilterType)​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousesetfiltertypefiltertype-enumraycastfiltertype","content":" Sets mouse's RaycastFilterType.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:EnableIcon()​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mouseenableicon","content":" Enables mouse icon.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:DisableIcon()​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousedisableicon","content":" Disables mouse icon.    ","version":"Next","tagName":"h3"},{"title":"> Mouse:Destroy()​","type":1,"pageTitle":"MouseModule","url":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule#-mousedestroy","content":" Destroy's the Mouse, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"ObjectPool","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"ObjectPool","url":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> InstancePoolsByClass: { [string]: { Instance } }​","type":1,"pageTitle":"ObjectPool","url":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool#-instancepoolsbyclass--string--instance--","content":" An array of instances that are allocated.    ","version":"Next","tagName":"h3"},{"title":"> PoolSizePerType: number​","type":1,"pageTitle":"ObjectPool","url":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool#-poolsizepertype-number","content":" Determines pool size per instance type.    ","version":"Next","tagName":"h3"},{"title":"> Name: string​","type":1,"pageTitle":"ObjectPool","url":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool#-name-string","content":" Name of the ObjectPool.  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"ObjectPool","url":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> ObjectPool:GetInstance: (className: string): Instance​","type":1,"pageTitle":"ObjectPool","url":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool#-objectpoolgetinstance-classname-string-instance","content":" Retrieves the instance from the object pool by it's name.    ","version":"Next","tagName":"h3"},{"title":"> ObjectPool:ReturnInstance: (instance: Instance)​","type":1,"pageTitle":"ObjectPool","url":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool#-objectpoolreturninstance-instance-instance","content":" Returns the instance back to it's object pool for later use.   ","version":"Next","tagName":"h3"},{"title":"Log","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Log","content":"Log Author: Sleitnick Log - class for logging to the AnalyticsService (e.g. PlayFab). The API is based off of Google's Flogger fluent logging API. Full documentation here","keywords":"","version":"Next"},{"title":"CharacterLoadedWrapper","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Loaded: Signal.Signal<Model> Public​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#-loaded-signalsignalmodel-public","content":" Fires when player's character model is fully loaded.    ","version":"Next","tagName":"h3"},{"title":"> Died: Signal.Signal<Model> Public​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#-died-signalsignalmodel-public","content":" Fires when player's character either died or character model was deleted from workspace.    ","version":"Next","tagName":"h3"},{"title":"> _player: Player Private​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#-_player-player-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _destroyed: boolean Private​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#-_destroyed-boolean-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _connections: { RBXScriptConnection } Private​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#-_connections--rbxscriptconnection--private","content":"   ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> CharacterLoadedWrapper.new(player: Player)​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#-characterloadedwrappernewplayer-player","content":" ServerScriptService/PlayerManagment.server.lua -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local CharacterLoadedWrapper = require(Modules.Utility.CharacterLoadedWrapper) -- [Services] -- local Players = game:GetService(&quot;Players&quot;) -- [Functions] -- -- Create new CharacterLoader which will observe characters state local function onPlayerAdded(player: Player) local characterLoader = CharacterLoadedWrapper.new(player) characterLoader.Loaded:Connect(function(character) print(`[{script.Name}]: Spawned {character}.`) end) characterLoader.Died:Connect(function(character) print(`[{script.Name}]: {character} died.`) end) end -- [Main] -- for _, player in Players:GetPlayers() do onPlayerAdded(player) end Players.PlayerAdded:Connect(onPlayerAdded)   ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"CharacterLoadedWrapper:IsLoaded(optionalCharacter: Model?): boolean Public​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#characterloadedwrapperisloadedoptionalcharacter-model-boolean-public","content":" Returns true if character passes these checks:  Has PrimaryPart setHumanoid is Alive (not in Enum.HumanoidStateType.Dead and Health &gt; 0)Descendant of workspace (indicates that character fully loaded)    ","version":"Next","tagName":"h3"},{"title":"CharacterLoadedWrapper:_listenForCharacterAdded(): () Private​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#characterloadedwrapper_listenforcharacteradded--private","content":" Starts listening for player's character state.    ","version":"Next","tagName":"h3"},{"title":"CharacterLoadedWrapper:_waitForLoadedAsync(character: Model): () Private​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#characterloadedwrapper_waitforloadedasynccharacter-model--private","content":" Waits asynchronously for player's character to load. This function assumes the character exists when it's called and has default behavior, i.e. developer is not parenting the character somewhere manually.  warning This method Yields!    ","version":"Next","tagName":"h3"},{"title":"CharacterLoadedWrapper:_listenForDeath(character: Model): () Private​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#characterloadedwrapper_listenfordeathcharacter-model--private","content":" Debounce to prevent deferred events from letting .Died event fire more than once, such as if the humanoid dies and the character is destroyed in the same compute cycle. With deferred events, that would fire both events on the next cycle, even if the connection is disconnected within the response to the event.    ","version":"Next","tagName":"h3"},{"title":"CharacterLoadedWrapper:Destroy(): () Public​","type":1,"pageTitle":"CharacterLoadedWrapper","url":"/RetroBoxDocs/docs/api-class-reference/utility/CharacterLoadedWrapper#characterloadedwrapperdestroy--public","content":" Destroy's the CharacterLoadedWrapper, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"Signal","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Signal","content":"Signal Author: Sleitnick Signal - is a Signal class which has effectively identical behavior to a normal RBXScriptSignal, with the only difference being a couple extra stack frames at the bottom of the stack trace when an error is thrown. This implementation caches runner coroutines, so the ability to yield in the signal handlers comes at minimal extra cost over a naive signal implementation that either always or never spawns a thread. Full documentation here.","keywords":"","version":"Next"},{"title":"DynamicOctree","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree","content":"","keywords":"","version":"Next"},{"title":"What are Octrees?​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#what-are-octrees","content":" In essence, an Octree is sort of like a recursive chunk system.  An octree is a tree data structure in which each internal node has exactly eight children. Octrees are most often used to partition a three-dimensional space by recursively subdividing it into eight octants.   Basically, it’s useful because if you have a huge area, instead of filling it with a ton of small, precise chunks and sacrificing performance, or a few big chunks and sacrificing fidelity, you can create an Octree and it will automatically subdivide! Better yet, if nothing exists in a particular area… there won’t be any grid sections there! Saves memory!  ","version":"Next","tagName":"h2"},{"title":"What this looks like in Roblox​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#what-this-looks-like-in-roblox","content":" Here’s a visualization I threw together. I am working on updating the Draw module included (made by Quenty), so we can visualize Dynamic Octrees in real time, and in a way that looks prettier and easier to see.  ","version":"Next","tagName":"h2"},{"title":"Why use Octrees?​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#why-use-octrees","content":" Octrees are a very fast way to handle searching for nearby objects. For example, if you need to compute collisions, instead of first checking the distance between every object and the player, you first see what objects are within a certain radius using Octree:RadiusSearch(Pos, Dist), to get nearby objects. It’s pretty sweet!  ServerScriptService/OctreeExample.server.lua local DOS = require(pathToDOSModule); local Grid = DOS.New(&quot;Players&quot;, 4, 100); game.Players.PlayerAdded:Connect(function (Player) local tracker; Player.CharacterAdded:Connect(function (Character) tracker = Grid:Track(Character.HumanoidRootPart, 0.1); -- Remember that using Grid:Track is not ideal for a large amount of objects. Better in this case to make a big loop to update for all players, or update only when movement events are fired. end); Player.CharacterRemoving:Connect(function (Character) if (tracker) then tracker:Destroy(); end end); end); while true do task.wait(1); local nearby = Grid:RadiusSearch(Vector3.zero, 50); print(&quot;Nearby entities: &quot;, nearby) end   ","version":"Next","tagName":"h2"},{"title":"Types​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#types","content":"   ","version":"Next","tagName":"h2"},{"title":"> OctreeNode​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#-octreenode","content":" ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Name: string Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#-name-string-public","content":" Name of the Octree Grid.    ","version":"Next","tagName":"h3"},{"title":"> Tree: DOS.Octree Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#-tree-dosoctree-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> Update: boolean Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#-update-boolean-public","content":" Enables/disables tracked entry updates.    ","version":"Next","tagName":"h3"},{"title":"> Entires: {unknown} Private​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#-entires-unknown-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> Tracked: {unknown} Private​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#-tracked-unknown-private","content":" ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> DOS.New(name: string, depth: number | 4, size: number | 512)​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#-dosnewname-string-depth-number--4-size-number--512","content":" ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"Grid:Add(instance: any, position: Vector3) Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#gridaddinstance-any-position-vector3-public","content":" Adds item entry to the octree with specified position.    ","version":"Next","tagName":"h3"},{"title":"Grid:AddStatic(instance: any, position: Vector3) Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#gridaddstaticinstance-any-position-vector3-public","content":" Adds static item entry to the octree with specified position. Static entries will not be destroyed or moved within the lifespan of the DOS grid.    ","version":"Next","tagName":"h3"},{"title":"Grid:UpdateFor(instance: any, position: Vector3) Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#gridupdateforinstance-any-position-vector3-public","content":" Updates item entry position for specified instance.    ","version":"Next","tagName":"h3"},{"title":"Grid:Track(instance: any, updateFrequency: number | 0.1) Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#gridtrackinstance-any-updatefrequency-number--01-public","content":" Starts updating item entry with specified update frequency (default is 0.1).  warning This is mainly for convenience, and should not be relied on or used for a large number of entries. It’s useful because you can give it an instance, including a model (so long as it has a primary part) and a set interval at how often it should update. For a large number of dynamic entries, it is best to implement your own update solution.    ","version":"Next","tagName":"h3"},{"title":"Grid:RadiusSearch(position: Vector3, radius: number) -> ({T}, {number}) Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#gridradiussearchposition-vector3-radius-number---t-number-public","content":" Performs radial search at specified position. Returns a tuble with array of item entries and array of distances of these item entries, if they are in radius.    ","version":"Next","tagName":"h3"},{"title":"Grid:GetAllNodes(): {OctreeNode<T>} Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#gridgetallnodes-octreenodet-public","content":" Returns array of all nodes in Octree Grid.    ","version":"Next","tagName":"h3"},{"title":"Grid:Destroy() Public​","type":1,"pageTitle":"DynamicOctree","url":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree#griddestroy-public","content":" Destroy's the Octree Grid, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"Observer","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Observer","content":"Observer Observer - is a pattern centers around observing the lifetime of a given state. The &quot;state&quot; in question can be anything. It could be a color value, a position, a table, or anything else. Typically, current state can be grabbed immediately (e.g. part.Color), and further changes can be detected via some sort of signal (e.g. part:GetPropertyChangedSignal(&quot;Color&quot;)). The observer pattern should provide two crucial elements: Detect the current and all future changes to some state.For a given observation, detect when that state changes to something else, thus to provide a way to clean up. The general layout of an observer should look like such: local stopObserving = observeSomething(...params, function(state) -- Do something with &quot;state&quot;. This runs every time state changes, including the initial state. return function() -- Cleanup. Called once &quot;state&quot; changes to something else, or the `stopObserving` function is called. end end) -- At anytime, the `stopObserving` function can be called to stop the above observer and clean up -- and currently-existing observations: stopObserving() Full documentation here","keywords":"","version":"Next"},{"title":"Stack","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> _data: {any} Private​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#-_data-any-private","content":" An array of values that are in the stack.  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> Stack:Push(Element: any) Public​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#-stackpushelement-any-public","content":" Pushes the element to the stack.    ","version":"Next","tagName":"h3"},{"title":"> Stack:Pop(): any Public​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#-stackpop-any-public","content":" Pops the element to the stack.    ","version":"Next","tagName":"h3"},{"title":"> Stack:Peek(): any Public​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#-stackpeek-any-public","content":" Returns last element in the stack.    ","version":"Next","tagName":"h3"},{"title":"> Stack:Empty(): boolean Public​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#-stackempty-boolean-public","content":" Checks whether stack is empty or not.    ","version":"Next","tagName":"h3"},{"title":"> Stack:Search(Element: any): number Public​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#-stacksearchelement-any-number-public","content":" Searches element inside stack. Returns position of the element in the stack. If -1 is returned, that means element is not present in the stack.    ","version":"Next","tagName":"h3"},{"title":"> Stack:__tostring(): string Private Metamethod​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#-stack__tostring-string-private-metamethod","content":" Returns the string representation of the stack. Use tostring(myStack) to get the string representation of a stack.    ","version":"Next","tagName":"h3"},{"title":"> Stack:__iter(): (typeof(next), {any}) Private Metamethod​","type":1,"pageTitle":"Stack","url":"/RetroBoxDocs/docs/api-class-reference/utility/Stack#-stack__iter-typeofnext-any-private-metamethod","content":" Returns the iterator for the stack object.  -- [Packages] -- local Modules = game.ReplicatedStorage.Modules -- [Modules] -- local Stack = require(Modules.Utility.Stack) -- [Objects] -- local myStack = Stack.new() myStack:Push(1) myStack:Push(2) myStack:Push(3) for i, element in myStack do print(i, element) end -- Output: 1 -- Output: 2 -- Output: 3    ","version":"Next","tagName":"h3"},{"title":"Queue","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> _first: number Private​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#-_first-number-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _last: number Private​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#-_last-number-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _queue: { T } Private​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#-_queue--t--private","content":"   ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> Queue:IsEmpty(): boolean Public​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#-queueisempty-boolean-public","content":" Checks whether the queue is empty.    ","version":"Next","tagName":"h3"},{"title":"> Queue:Enqueue(value: T) Public​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#-queueenqueuevalue-t-public","content":" Adds value to a queue.    ","version":"Next","tagName":"h3"},{"title":"> Queue:Dequeue(): T Public​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#-queuedequeue-t-public","content":" Removes a value from the queue.    ","version":"Next","tagName":"h3"},{"title":"> Queue:GetQueueLenght(): number Public​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#-queuegetqueuelenght-number-public","content":" Returns current lenght of the queue.    ","version":"Next","tagName":"h3"},{"title":"> Queue:IsInQueue(item: any): boolean Public​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#-queueisinqueueitem-any-boolean-public","content":" Check whether item is in queue or not.    ","version":"Next","tagName":"h3"},{"title":"> Queue:Destroy() Public​","type":1,"pageTitle":"Queue","url":"/RetroBoxDocs/docs/api-class-reference/utility/Queue#-queuedestroy-public","content":" Destroy's and clears the Queue, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"SimpleBit","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/SimpleBit","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"SimpleBit","url":"/RetroBoxDocs/docs/api-class-reference/utility/SimpleBit#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> SimpleBit.setBit(num: number, pos: number) Static​","type":1,"pageTitle":"SimpleBit","url":"/RetroBoxDocs/docs/api-class-reference/utility/SimpleBit#-simplebitsetbitnum-number-pos-number-static","content":" Sets the bit to 1 at a specific position.  local SimpleBit = require(path.to.SimpleBit) local num = 0 -- binary: 0000 local result = SimpleBit.setBit(num, 2) -- sets bit 2 print(result) -- Output: 2 (binary: 0010)     ","version":"Next","tagName":"h3"},{"title":"> SimpleBit.clearBit(num: number, pos: number) Static​","type":1,"pageTitle":"SimpleBit","url":"/RetroBoxDocs/docs/api-class-reference/utility/SimpleBit#-simplebitclearbitnum-number-pos-number-static","content":" Sets the bit to 0 at a specific position.  local num = 7 -- binary: 0111 local result = SimpleBit.clearBit(num, 2) -- clears bit 2 print(result) -- Output: 5 (binary: 0101)     ","version":"Next","tagName":"h3"},{"title":"> SimpleBit.flipBit(num: number, pos: number) Static​","type":1,"pageTitle":"SimpleBit","url":"/RetroBoxDocs/docs/api-class-reference/utility/SimpleBit#-simplebitflipbitnum-number-pos-number-static","content":" Flips the bit at a specific position.  local num = 4 -- binary: 0100 local result = SimpleBit.flipBit(num, 3) -- flips bit 3 (set to 0) print(result) -- Output: 0 (binary: 0000) local result2 = SimpleBit.flipBit(num, 2) -- flips bit 2 (set to 1) print(result2) -- Output: 6 (binary: 0110)     ","version":"Next","tagName":"h3"},{"title":"> SimpleBit.checkBit(num: number, pos: number): boolean Static​","type":1,"pageTitle":"SimpleBit","url":"/RetroBoxDocs/docs/api-class-reference/utility/SimpleBit#-simplebitcheckbitnum-number-pos-number-boolean-static","content":" Checks whether the bit is 1 or 0. Returns true if bit is set to 1.  local num = 5 -- binary: 0101 print(SimpleBit.checkBit(num, 1)) -- true (bit 1 is 1) print(SimpleBit.checkBit(num, 2)) -- false (bit 2 is 0) print(SimpleBit.checkBit(num, 3)) -- true (bit 3 is 1)    ","version":"Next","tagName":"h3"},{"title":"Promise","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Promise","content":"","keywords":"","version":"Next"},{"title":"Why use Promises?​","type":1,"pageTitle":"Promise","url":"/RetroBoxDocs/docs/api-class-reference/utility/Promise#why-use-promises","content":"   Before diving in to Promises themselves, you might need some convincing of why we should even use Promises to begin with. That's totally fair! The following text should give you a brief introduction to Promises and a good understanding of why they are useful.    ","version":"Next","tagName":"h2"},{"title":"Threads​​","type":1,"pageTitle":"Promise","url":"/RetroBoxDocs/docs/api-class-reference/utility/Promise#threads","content":"   When writing programs, it's possible to divide functions into two groups: &quot;synchronous&quot; and &quot;asynchronous&quot;. A &quot;synchronous operation&quot; is one that can run to completion and generate any necessary return values with only the information available to your code at the time the operation begins. For example, a function that takes two Parts and returns the distance between them would be synchronous, because all information needed to compute that value is available when you call the function.  But sometimes situations arise where we call a function that needs access to a value that doesn't exist at call time. This could be because it requires a network request to get the data, or the user needs to input some text, or we're waiting for another process to finish computation and give us the value. In any case, we refer to this as an &quot;asynchronous operation&quot;.  The simplest way to deal with this is to just stop execution of the thread, or &quot;block&quot;. This means that when you call a function that needs some data that doesn't exist yet, the entire thread stops running and waits for the data to be ready before returning and continuing. This is actually how many low-level languages typically model asynchronous operations. To allow tasks to run at the same time, programs will create new threads that branch from parent threads and jump back on when they're finished blocking. However, this presents challenges with sharing memory and synchronizing data across threads, because at the operating system level threads truly are running in parallel.    ","version":"Next","tagName":"h2"},{"title":"Coroutines​​","type":1,"pageTitle":"Promise","url":"/RetroBoxDocs/docs/api-class-reference/utility/Promise#coroutines","content":"   To simplify sharing memory and potentially reduce overhead, many programs will emulate a multi-threaded environment using green threads or coroutines, which are run concurrently inside of one OS thread. The key difference between OS threads and coroutines is that coroutines do not actually run in parallel -- only one coroutine is ever executing at a time. In the context of Lua, the term &quot;thread&quot; is used to refer to a coroutine, but they are not the same thing as OS threads.  To facilitate this emulation, a thread scheduler is introduced to keep track of the emulated threads and decide which thread to run next when the current thread yields. Yielding is similar to blocking, except when a coroutine yields, it signals to the thread scheduler that it can run other code and resume the thread at a later time.  When the game starts, each Script and LocalScript in your game becomes its own Lua thread in the thread scheduler and each script is run either to completion or until it yields. Once all of the scripts have gone through this process, Roblox does other things like updating humanoids and running physics. After all that's done, the next frame begins and this process repeats until the game closes.  So, what really happens when we call an asynchronous function like Player:IsInGroup? Well, the current Lua thread yields (letting other Lua code start running elsewhere in your game), and Roblox makes a new OS thread which blocks on an HTTP request to their internal group APIs in the background. Sometime in the future when that request comes back, the value jumps back onto the main Roblox thread and your Lua thread is scheduled to be resumed with the given arguments on the next step.  Problems with the Coroutine Model​Coroutines fix the memory sharing problem of OS threads, but they still inherit other problems when used on their own:  It's impossible to know if a function that you call is going to yield or not unless you look at the documentation or strictly abide by a naming convention (which is not realistic). Unintentionally yielding the thread is the source of a large class of bugs and race conditions that Roblox developers run into. When an asynchronous operation fails or an error is encountered, Lua functions usually either raise an error or return a success value followed by the actual value. Both of these methods lead to repeating the same tired patterns many times over for checking if the operation was successful, and make composing multiple asynchronous operations difficult. It is difficult to deal with running multiple asynchronous operations concurrently and then retrieve all of their values at the end without extraneous machinery. Coroutines lack easy access to introspection without manual work to enable it at the call site. Coroutines lack the ability to cancel an operation if the value is no longer needed without extraneous manual work at both the call site and the function implementation.Enter Promises​In Lua, Promises are an abstraction over coroutines. A &quot;Promise&quot; is just an object which we can use to represent a value that exists in the future, but doesn't right now. Promises are first-class citizens in other languages like JavaScript, which doesn't have coroutines and facilitates all asynchronous code through callbacks alone.  When calling an asynchronous function, instead of yielding, the function returns a Promise synchronously. The Promise object allows you to then attach a callback function which will be run later when the Promise resolves. The function you called is in charge of resolving the Promise with your value when it is done working.  Promises also have built-in error handling. In addition to resolving, a Promise can reject, which means that something went wrong when getting the future value we asked for. You can attach a different callback to be run when the Promise rejects so you can handle any error cases.  Let's take a look at this in action. We will make a function which wraps HttpService:GetAsync and instead of yielding, it will return a Promise.  Full documentation here. ","version":"Next","tagName":"h2"},{"title":"TableKit","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/TableKit","content":"TableKit Author: ffrostfall Offcial DevForum post TableKit - kit of functions to help manipulate &amp; utilize tables more effectively. It contains various functions that have real-world use cases such as .Reconcile(), .DeepCopy(), .Every(), .ToString(), and a lot more. It’s pure- it consists of completely pure functions. You can just drag it in, and use it. Just like it was designed for.","keywords":"","version":"Next"},{"title":"Symbol","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Symbol","content":"Symbol Symbol - represents a unique object.\\ Symbols are often used as unique keys in tables. This is useful to avoid possible collisions with a key in a table, since the symbol will always be unique and cannot be reconstructed. Full documentation here.","keywords":"","version":"Next"},{"title":"Timer","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Timer","content":"Timer Author: Sleitnick Timer – A utility that tracks elapsed time and allows you to bind custom behaviors or actions to occur after a specified duration or at regular intervals. Full documentation here","keywords":"","version":"Next"},{"title":"ToolRigger","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Tool: Tool Public​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#-tool-tool-public","content":" A reference to binded tool.    ","version":"Next","tagName":"h3"},{"title":"> Owner: Player Public​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#-owner-player-public","content":" A reference to the owner of the ToolRigger.    ","version":"Next","tagName":"h3"},{"title":"> Character: Model Public​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#-character-model-public","content":" A reference to character model which will get rigged.    ","version":"Next","tagName":"h3"},{"title":"> Configuration: Configuration Public​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#-configuration-configuration-public","content":" Reference to the configuration of the ToolRigger.    ","version":"Next","tagName":"h3"},{"title":"> _trove:  Trove.Trove Private​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#-_trove--trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _boneBuilder: BoneBuilder.BoneBuilder Private​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#-_bonebuilder-bonebuilderbonebuilder-private","content":" Reference to a BoneBuilder object which handles the rigging.    ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#constructor","content":" ","version":"Next","tagName":"h2"},{"title":"ToolRigger.new(tool: Tool, animationConfiguration: Configuration)​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#toolriggernewtool-tool-animationconfiguration-configuration","content":" AnimationConfiguration instance must have this structure.   ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> ToolRigger:_bindEquip() Private​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#-toolrigger_bindequip-private","content":" Bind the equip behavior to the tool.    ","version":"Next","tagName":"h3"},{"title":"> ToolRigger:Destroy() Public​","type":1,"pageTitle":"ToolRigger","url":"/RetroBoxDocs/docs/api-class-reference/utility/ToolRigger#-toolriggerdestroy-public","content":" Destroy's the ToolRigger, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"WaitFor","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/WaitFor","content":"WaitFor Author: Sleitnick WaitFor - Utility class for awaiting the existence of instances without yielding the thread. Allows for non-blocking await behavior with Promises. Full documentation here","keywords":"","version":"Next"},{"title":"StatusEffect","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Humanoid: Humanoid Public​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-humanoid-humanoid-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> Effects: {func: (humanoid: Humanoid) -> ()?} Public​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-effects-func-humanoid-humanoid----public","content":"   ","version":"Next","tagName":"h3"},{"title":"> Destroying: Signal.Signal<nil> Public​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-destroying-signalsignalnil-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> _timer: timer Private​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-_timer-timer-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _lingerTimer: timer Private​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-_lingertimer-timer-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _trove:  Trove.TrovePrivate​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-_trove--trovetroveprivate","content":"   ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#constructor","content":" ","version":"Next","tagName":"h2"},{"title":"> StatusEffect.new(target: Model | Humanoid, updateTime: number?, lingerTime: number?)​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-statuseffectnewtarget-model--humanoid-updatetime-number-lingertime-number","content":"   ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#methods","content":" ","version":"Next","tagName":"h2"},{"title":"> StatusEffect:ResetLingerTimer() Public​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-statuseffectresetlingertimer-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> StatusEffect:ChangeUpdateTime(updateTime: number) Public​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-statuseffectchangeupdatetimeupdatetime-number-public","content":"   ","version":"Next","tagName":"h3"},{"title":"> StatusEffect:AddEffect(func: (humanoid: Humanoid) -> ()) Public​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-statuseffectaddeffectfunc-humanoid-humanoid----public","content":"   ","version":"Next","tagName":"h3"},{"title":"> `StatusEffect:Destroy( Public​","type":1,"pageTitle":"StatusEffect","url":"/RetroBoxDocs/docs/api-class-reference/utility/StatusEffect#-statuseffect-public","content":" Destroy's the StatusEffect, releasing it from memory.   ","version":"Next","tagName":"h3"},{"title":"SyncedTable","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable","content":"","keywords":"","version":"Next"},{"title":"Types​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#types","content":"   type SyncedTableEnum = { ONE_WAY_COMMUNICATION = 1, TWO_WAY_COMMUNICATION = 2 }   ","version":"Next","tagName":"h2"},{"title":"> SyncedTableEnum.ONE_WAY_COMMUNICATION​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-syncedtableenumone_way_communication","content":" Only server is authorized to sync table with client  ","version":"Next","tagName":"h3"},{"title":"> SyncedTableEnum.TWO_WAY_COMMUNICATION​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-syncedtableenumtwo_way_communication","content":" Both server and client are authorized to sync table  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> content: {T} Public​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-content-t-public","content":" Table content that will be synced.    ","version":"Next","tagName":"h3"},{"title":"> mode: SyncedTableEnum Public​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-mode-syncedtableenum-public","content":" Determines in what mode the table will be able to sync.    ","version":"Next","tagName":"h3"},{"title":"> tableID: string Public​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-tableid-string-public","content":" An ID that represent a table that will be synced with.    ","version":"Next","tagName":"h3"},{"title":"> TableSynced: Signal.Signal<{T}> Public​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-tablesynced-signalsignalt-public","content":" This event fires whenever table is synced.    ","version":"Next","tagName":"h3"},{"title":"> _syncTableConnection: string Private​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-_synctableconnection-string-private","content":" A string that represent the Remote connection.    ","version":"Next","tagName":"h3"},{"title":"> _player: Player Private​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-_player-player-private","content":" A player to whom table will get synced with    ","version":"Next","tagName":"h3"},{"title":"Constructor​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#constructor","content":"   ","version":"Next","tagName":"h2"},{"title":"> SyncedTable.new<T>(mode: SyncedTableEnum, tableID: string, player: Player?)​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-syncedtablenewtmode-syncedtableenum-tableid-string-player-player","content":" note You don't need to pass a player reference on client-side.  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"> SyncedTable:SetTable<T>(t: {T}) Public​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-syncedtablesettablett-t-public","content":" Sets the table.    ","version":"Next","tagName":"h3"},{"title":"> SyncedTable:GetTable<T>(): {T} Public​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-syncedtablegettablet-t-public","content":" Returns the mutable table.    ","version":"Next","tagName":"h3"},{"title":"> SyncedTable:Sync<T>() Public​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-syncedtablesynct-public","content":" Sync the table with the client.    ","version":"Next","tagName":"h3"},{"title":"> SyncedTable:AwaitSync<T>() Public​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-syncedtableawaitsynct-public","content":" Sync the table with the client.  warning This method Yields!    ","version":"Next","tagName":"h3"},{"title":"> SyncedTable:Destroy<T>() Public​","type":1,"pageTitle":"SyncedTable","url":"/RetroBoxDocs/docs/api-class-reference/utility/SyncedTable#-syncedtabledestroyt-public","content":" Destroy's the CharacterLoadedWrapper, releasing it from memory.  note SyncedTables created on client are not deleted, so keep that in mind.   ","version":"Next","tagName":"h3"},{"title":"Trove","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Trove","content":"Trove Author: Sleitnick Trove - a helpful utility for tracking any sort of object during runtime that needs to get cleaned up at some point. Full documentation here","keywords":"","version":"Next"},{"title":"Hitbox","type":0,"sectionRef":"#","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox","content":"","keywords":"","version":"Next"},{"title":"Types​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#types","content":"   ","version":"Next","tagName":"h2"},{"title":"HitboxConfiguration​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitboxconfiguration","content":" type HitboxConfiguration = { HitboxType: &quot;Magnitude&quot; | &quot;Spatial&quot;, Shape: &quot;Box&quot; | &quot;Sphere&quot;, Owner: Player?, Id: number, }   &gt; HitboxType: &quot;Magnitude&quot; | &quot;Spatial&quot;​  Sets the type of the Hitbox. If set to Magnitude, hitbox will perform magnitude checks which will determine the collision result  info Magnitude checks will be based on the AABB (Axis Aligned Bounding Box) instead of the typical sphere.  Spatial hitboxes use Roblox's Spatial Query API which may yield to better results, but takes longer to compute due to Roblox engine accounting for every part in Octree.  &gt; Shape: &quot;Box&quot; | &quot;Sphere&quot;​  Sets the hitbox collision Shape. Can be only Box or Sphere hitbox.  &gt; Owner: Player?​  Determines who's the owner of the hitbox and who will perform collision checks  note All of the data and collisions sent from client are verified before firing any events prior.  When Player is set as the network owner, hitbox will BE replicated to it and client will continuously check for collisions. If client detects collision it will sent data to server to verify. When Server is set as the network owner, hitbox will NOT be replicated and all of collision operations will be performed on server-side completely. Don't use server owned hitboxes when doing any kind of interaction player is responsible, best for NPC's or any other stuff server is in charge of.    ","version":"Next","tagName":"h3"},{"title":"HitboxParams​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitboxparams","content":" type HitboxParams = { HitboxType: &quot;Magnitude&quot; | &quot;Spatial&quot;, Shape: &quot;Box&quot; | &quot;Sphere&quot;, Debug: boolean, Size: Vector3, CFrame: CFrame?, Owner: Player?, }   &gt; HitboxType: &quot;Magnitude&quot; | &quot;Spatial&quot;​  Sets the type of the Hitbox. If set to Magnitude, hitbox will perform magnitude checks which will determine the collision result  info Magnitude checks will be based on the AABB (Axis Aligned Bounding Box) instead of the typical sphere.  Spatial hitboxes use Roblox's Spatial Query API which may yield to better results, but takes longer to compute due to Roblox engine accounting for every part in Octree.  &gt; Shape: &quot;Box&quot; | &quot;Sphere&quot;​  Sets the hitbox collision Shape. Can be only Box or Sphere hitbox.  &gt; Debug: boolean​  Determines whether collision debug is enabled. If hitbox has network owner that's Player, debug collision will be shown on network owners side too.  &gt; Size: Vector3​  Sets the size of the Hitbox.  &gt; CFrame: CFrame?​  Sets the CFrame of the Hitbox in world space.  &gt; Owner: Player?​  Determines who's the owner of the hitbox and who will perform collision checks  note All of the data and collisions sent from client are verified before firing any events prior.  When Player is set as the network owner, hitbox will BE replicated to it and client will continuously check for collisions. If client detects collision it will sent data to server to verify. When Server is set as the network owner, hitbox will NOT be replicated and all of collision operations will be performed on server-side completely. Don't use server owned hitboxes when doing any kind of interaction player is responsible, best for NPC's or any other stuff server is in charge of.  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#properties","content":"   ","version":"Next","tagName":"h2"},{"title":"> Size: Vector3 Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-size-vector3-public","content":" Determines the Size of the hitbox.    ","version":"Next","tagName":"h3"},{"title":"> CFrame: CFrame Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-cframe-cframe-public","content":" Current position and orientation of the hitbox in world.    ","version":"Next","tagName":"h3"},{"title":"> Debug: boolean Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-debug-boolean-public","content":" Determines whether debug hitboxes are visible or not. Don't use it in production it may cause huge lag with large amount of hitboxes.    ","version":"Next","tagName":"h3"},{"title":"> Hit: Signal.Signal<BasePart> Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-hit-signalsignalbasepart-public","content":" Fires whenever a BasePart enters the hitbox.    ","version":"Next","tagName":"h3"},{"title":"> Exit: Signal.Signal<BasePart> Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-exit-signalsignalbasepart-public","content":" Fires whenever a BasePart exits the hitbox, if it was inside before.    ","version":"Next","tagName":"h3"},{"title":"> HumanoidHit: Signal.Signal<Humanoid> Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-humanoidhit-signalsignalhumanoid-public","content":" Fires whenever a Humanoid Character enters the hitbox.    ","version":"Next","tagName":"h3"},{"title":"> HumanoidExit: Signal.Signal<Humanoid> Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-humanoidexit-signalsignalhumanoid-public","content":" Fires whenever a Humanoid Character exits the hitbox, if it was inside before.    ","version":"Next","tagName":"h3"},{"title":"> _hitboxOctree:  DOS Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_hitboxoctree--dos-private","content":" Reference to the Octree which hitbox uses to track objects.    ","version":"Next","tagName":"h3"},{"title":"> _trackedInstances: { [Model]: BasePart } Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_trackedinstances--model-basepart--private","content":" Reference to a HashMap of tracked Character's.    ","version":"Next","tagName":"h3"},{"title":"> _collidedInstances: { [Model]: { [BasePart]: boolean } } Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_collidedinstances--model--basepart-boolean---private","content":" Reference to a HashMap of currently colliding BaseParts.    ","version":"Next","tagName":"h3"},{"title":"> _collidedHumanoids: { [Model]: boolean } Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_collidedhumanoids--model-boolean--private","content":" Reference to a HashMap of currently colliding Humanoids.    ","version":"Next","tagName":"h3"},{"title":"> _previousProperties: { [string]: any } Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_previousproperties--string-any--private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _history: { any } Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_history--any--private","content":" Reference to a previously recorded CFrames of the tracked objects. This is used to rewind to a certain point in time to verify a collision sent by client.  note _history is used in Magnitude hitboxes only, Spatial hitboxes don't have support for it yet.    ","version":"Next","tagName":"h3"},{"title":"> _hitboxPart: Part Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_hitboxpart-part-private","content":" Reference to a Part which represents the hitbox in world. Primaraly used for debug purposes.    ","version":"Next","tagName":"h3"},{"title":"> _partWeld: BasePart? Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_partweld-basepart-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _velocity: Vector3 Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_velocity-vector3-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _lastCFrame: CFrame Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_lastcframe-cframe-private","content":" Previous CFrame to the last processed CFrame.    ","version":"Next","tagName":"h3"},{"title":"> _weldOffset: CFrame Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_weldoffset-cframe-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _trove:  Trove.Trove Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_trove--trovetrove-private","content":"   ","version":"Next","tagName":"h3"},{"title":"> _enabled: boolean Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_enabled-boolean-private","content":" Determines whether hitbox is active or not.    ","version":"Next","tagName":"h3"},{"title":"> _steppedConnection: RBXScriptConnection? Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_steppedconnection-rbxscriptconnection-private","content":" Reference to a RunService.Stepped RBXScriptConnection.    ","version":"Next","tagName":"h3"},{"title":"> _config: HitboxConfiguration Private 🔒Read-Only​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-_config-hitboxconfiguration-private-read-only","content":" A Read-Only reference of the passed HitboxConfiguration which is used to setup hitbox and later replicate the hitbox state to the client if network owner is set.    ","version":"Next","tagName":"h3"},{"title":"Constructors​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#constructors","content":"   ","version":"Next","tagName":"h2"},{"title":"> Hitbox.new(hitboxParams: HitboxParams)​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#-hitboxnewhitboxparams-hitboxparams","content":" ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#methods","content":"   ","version":"Next","tagName":"h2"},{"title":"Hitbox:ClearTaggedChars() Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitboxcleartaggedchars-public","content":"   ","version":"Next","tagName":"h3"},{"title":"Hitbox:Start() Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitboxstart-public","content":" Starts the hitbox collision checking.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:WeldTo(weldTo: BasePart, offset: CFrame) Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitboxweldtoweldto-basepart-offset-cframe-public","content":" Weld the hitbox to the specified BasePart with Offset. Hitbox will keep the orientation and position relative to the specified BasePart.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:Unweld() Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitboxunweld-public","content":" Unwelds the hitbox from the part to which it was welded to. Orientation will be kept to the last CFrame.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:ChangeWeldOffset(newOffset: CFrame) Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitboxchangeweldoffsetnewoffset-cframe-public","content":" Changes the hitbox's weld offset. Hitbox must be welded before this method is called.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:Stop() Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitboxstop-public","content":" Stops the hitbox collision checking.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_getClosestPosition(character: Model, now: number): Vector3 Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_getclosestpositioncharacter-model-now-number-vector3-private","content":" Returns the closets position of the character to a hitbox. This method used for Magnitude hitbox tests.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_getCFrame(): CFrame Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_getcframe-cframe-private","content":" Returns the hitbox CFrame.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_getRewindCFrame(character: Model, part: BasePart, desiredTime: number): CFrame? Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_getrewindcframecharacter-model-part-basepart-desiredtime-number-cframe-private","content":" Returns the rewind cframe of the character's body part to a specific time. May not always return CFrame due to data being expired and removed. This method used for Magnitude hitbox tests.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_trackCharacter(character: Model) Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_trackcharactercharacter-model-private","content":" Starts tracking character.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_replicateProperties() Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_replicateproperties-private","content":" Replicates properties of the hitbox to a network owner.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_updateDebugHitbox() Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_updatedebughitbox-private","content":" Updates the debug part orientation.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_runSpatialQueryCollision() Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_runspatialquerycollision-private","content":" Runs the SpatialQueryCollision test.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_runMagnitudeCollision() Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_runmagnitudecollision-private","content":" Runs the MagnitudeCollision test.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_updateHitboxOctree() Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_updatehitboxoctree-private","content":" Updates the hitbox's Octree keeping data up to date.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_updateVelocity(dt: number) Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_updatevelocitydt-number-private","content":" Updates the hitbox's velocity to compenstate for lag when welded to a part whose owner is NOT server.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:_runMagnitudeQuery(character: Model, desiredTime: number?) Private​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitbox_runmagnitudequerycharacter-model-desiredtime-number-private","content":" Performs a magnitude query, checking against every tracked instance.    ","version":"Next","tagName":"h3"},{"title":"Hitbox:Destroy() Public​","type":1,"pageTitle":"Hitbox","url":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox#hitboxdestroy-public","content":" Destroy's the Hitbox, releasing it from memory. Replicated hitboxes will be automatically deleted.   ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}