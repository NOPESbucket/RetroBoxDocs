"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4223],{7751:(e,u,n)=>{n.r(u),n.d(u,{Tag:()=>c,assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"api-class-reference/utility/Queue","title":"Queue","description":"Queue - is a collection of entities that are maintained in a sequence and can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence. By convention, the end of the sequence at which elements are added is called the back, tail, or rear of the queue, and the end at which elements are removed is called the head or front of the queue, analogously to the words used when people line up to wait for goods or services.","source":"@site/docs/api-class-reference/utility/Queue.md","sourceDirName":"api-class-reference/utility","slug":"/api-class-reference/utility/Queue","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/Queue","draft":false,"unlisted":false,"editUrl":"https://github.com/NOPESbucket/RetroBox/edit/main/docs/api-class-reference/utility/Queue.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"apiSidebar","previous":{"title":"Promise","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/Promise"},"next":{"title":"Signal","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/Signal"}}');var r=n(4848),i=n(8453);const o={sidebar_position:11},s=void 0,l={},c=({children:e,color:u})=>(0,r.jsx)("span",{style:{fontSize:"0.75em",backgroundColor:u,borderRadius:"4px",color:"#fff",padding:"0.2rem 0.5rem",fontWeight:"bold"},children:e}),a=[{value:"Properties",id:"properties",level:2},{value:"&gt; <code>_first: number</code> <Tag>Private</Tag>",id:"-_first-number-private",level:3},{value:"&gt; <code>_last: number</code> <Tag>Private</Tag>",id:"-_last-number-private",level:3},{value:"&gt; <code>_queue: { T }</code> <Tag>Private</Tag>",id:"-_queue--t--private",level:3},{value:"Methods",id:"methods",level:2},{value:"&gt; <code>Queue:IsEmpty(): boolean</code> <Tag>Public</Tag>",id:"-queueisempty-boolean-public",level:3},{value:"&gt; <code>Queue:Enqueue(value: T)</code> <Tag>Public</Tag>",id:"-queueenqueuevalue-t-public",level:3},{value:"&gt; <code>Queue:Dequeue(): T</code> <Tag>Public</Tag>",id:"-queuedequeue-t-public",level:3},{value:"&gt; <code>Queue:GetQueueLenght(): number</code> <Tag>Public</Tag>",id:"-queuegetqueuelenght-number-public",level:3},{value:"&gt; <code>Queue:IsInQueue(item: any): boolean</code> <Tag>Public</Tag>",id:"-queueisinqueueitem-any-boolean-public",level:3},{value:"&gt; <code>Queue:Destroy()</code> <Tag>Public</Tag>",id:"-queuedestroy-public",level:3}];function d(e){const u={code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(u.p,{children:"Queue - is a collection of entities that are maintained in a sequence and can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence. By convention, the end of the sequence at which elements are added is called the back, tail, or rear of the queue, and the end at which elements are removed is called the head or front of the queue, analogously to the words used when people line up to wait for goods or services."}),"\n",(0,r.jsx)(u.p,{children:(0,r.jsx)(u.img,{src:"https://prod.docsiteassets.roblox.com/assets/data/memory-store/Priority-Queue-Diagram.png.webp",alt:"queue-visual2"})}),"\n",(0,r.jsx)(u.pre,{children:(0,r.jsx)(u.code,{className:"language-lua",children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Queue = require(Modules.Utility.Queue)\r\n\r\n-- [Objects] --\r\nlocal myQueue = Queue.new()\r\n\r\n-- Add some values to the queue\r\nmyQueue:Enqueue(5)\r\nmyQueue:Enqueue(10)\r\nmyQueue:Enqueue(15)\r\n\r\n-- myQueue = { 5, 10, 15 }\r\n\r\n-- Remove one value from the queue\r\nlocal first = myQueue:Dequeue()\r\nprint("The first value added to the queue was", first)\r\n\r\n-- myQueue = { 10, 15 }\r\n\r\n-- Add more values to the queue\r\nmyQueue:Enqueue(20)\r\nmyQueue:Enqueue(25)\r\nmyQueue:Enqueue(30)\r\n\r\n-- myQueue = { 10, 15, 20, 25, 30 }\r\n\r\n-- Remove another value from the queue\r\nlocal second = myQueue:Dequeue()\r\nprint("The second value added to the queue was", second)\r\n\r\n-- myQueue = { 15, 20, 25, 30 }\n'})}),"\n",(0,r.jsx)(u.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsxs)(u.h3,{id:"-_first-number-private",children:["> ",(0,r.jsx)(u.code,{children:"_first: number"})," ",(0,r.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsxs)(u.h3,{id:"-_last-number-private",children:["> ",(0,r.jsx)(u.code,{children:"_last: number"})," ",(0,r.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsxs)(u.h3,{id:"-_queue--t--private",children:["> ",(0,r.jsx)(u.code,{children:"_queue: { T }"})," ",(0,r.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsx)(u.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsxs)(u.h3,{id:"-queueisempty-boolean-public",children:["> ",(0,r.jsx)(u.code,{children:"Queue:IsEmpty(): boolean"})," ",(0,r.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,r.jsx)(u.p,{children:"Checks whether the queue is empty."}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsxs)(u.h3,{id:"-queueenqueuevalue-t-public",children:["> ",(0,r.jsx)(u.code,{children:"Queue:Enqueue(value: T)"})," ",(0,r.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,r.jsx)(u.p,{children:"Adds value to a queue."}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsxs)(u.h3,{id:"-queuedequeue-t-public",children:["> ",(0,r.jsx)(u.code,{children:"Queue:Dequeue(): T"})," ",(0,r.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,r.jsx)(u.p,{children:"Removes a value from the queue."}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsxs)(u.h3,{id:"-queuegetqueuelenght-number-public",children:["> ",(0,r.jsx)(u.code,{children:"Queue:GetQueueLenght(): number"})," ",(0,r.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,r.jsx)(u.p,{children:"Returns current lenght of the queue."}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsxs)(u.h3,{id:"-queueisinqueueitem-any-boolean-public",children:["> ",(0,r.jsx)(u.code,{children:"Queue:IsInQueue(item: any): boolean"})," ",(0,r.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,r.jsx)(u.p,{children:"Check whether item is in queue or not."}),"\n",(0,r.jsx)(u.hr,{}),"\n",(0,r.jsxs)(u.h3,{id:"-queuedestroy-public",children:["> ",(0,r.jsx)(u.code,{children:"Queue:Destroy()"})," ",(0,r.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,r.jsx)(u.p,{children:"Destroy's and clears the Queue, releasing it from memory."}),"\n",(0,r.jsx)(u.hr,{})]})}function h(e={}){const{wrapper:u}={...(0,i.R)(),...e.components};return u?(0,r.jsx)(u,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,u,n)=>{n.d(u,{R:()=>o,x:()=>s});var t=n(6540);const r={},i=t.createContext(r);function o(e){const u=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(u):{...u,...e}}),[u,e])}function s(e){let u;return u=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:u},e.children)}}}]);