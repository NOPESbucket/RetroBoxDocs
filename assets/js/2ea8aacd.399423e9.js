"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4452],{2114:(e,r,n)=>{n.r(r),n.d(r,{Tag:()=>i,assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api-class-reference/core/Network","title":"Network","description":"Network - is a network abstraction layer for Warp that works both Server/Client. This can be inherited allowing you to easily do RPC calls.","source":"@site/docs/api-class-reference/core/Network.md","sourceDirName":"api-class-reference/core","slug":"/api-class-reference/core/Network","permalink":"/RetroBoxDocs/docs/api-class-reference/core/Network","draft":false,"unlisted":false,"editUrl":"https://github.com/NOPESbucket/RetroBox/edit/main/docs/api-class-reference/core/Network.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"apiSidebar","previous":{"title":"Class","permalink":"/RetroBoxDocs/docs/api-class-reference/core/Class"},"next":{"title":"Widget","permalink":"/RetroBoxDocs/docs/api-class-reference/core/Widget"}}');var o=n(4848),l=n(8453);const s={sidebar_position:2},a=void 0,c={},i=({children:e,color:r})=>(0,o.jsx)("span",{style:{fontSize:"0.75em",backgroundColor:r,borderRadius:"4px",color:"#fff",padding:"0.2rem 0.5rem",fontWeight:"bold"},children:e}),d=[{value:"Constructor",id:"constructor",level:2},{value:"&gt; <code>Network.new(): Types.Network</code> <Tag>Public</Tag>",id:"-networknew-typesnetwork-public",level:3},{value:"Methods",id:"methods",level:2},{value:"&gt; <code>Network.CreateRemote(self: Types.Network, remoteName: string, conf: any?): ()</code> <Tag>Public</Tag> <Tag>Server</Tag> <Tag>Client</Tag>",id:"-networkcreateremoteself-typesnetwork-remotename-string-conf-any--public-server-client",level:3},{value:"&gt; <code>Network.ConnectRemote(self: Types.Network, remoteName: string, callback: (...any) -&gt; ()): string</code> <Tag>Public</Tag> <Tag>Server</Tag> <Tag>Client</Tag>",id:"-networkconnectremoteself-typesnetwork-remotename-string-callback-any----string-public-server-client",level:3},{value:"&gt; <code>Network.ConvertConnectionLike(self: Types.Network, remoteName: string, key: string): Types.ConnectionLike</code> <Tag>Public</Tag> <Tag>Server</Tag> <Tag>Client</Tag>",id:"-networkconvertconnectionlikeself-typesnetwork-remotename-string-key-string-typesconnectionlike-public-server-client",level:3},{value:"&gt; <code>Network.DisconnectRemote(self: Types.Network, remoteName: string, key: string): ()</code> <Tag>Public</Tag> <Tag>Server</Tag> <Tag>Client</Tag>",id:"-networkdisconnectremoteself-typesnetwork-remotename-string-key-string--public-server-client",level:3},{value:"&gt; <code>Network.FireRemote(self: Types.Network, remoteName: string, reliable: boolean, player: Player | nil, ...: any): ()</code> <Tag>Public</Tag> <Tag>Server</Tag> <Tag>Client</Tag>",id:"-networkfireremoteself-typesnetwork-remotename-string-reliable-boolean-player-player--nil--any--public-server-client",level:3},{value:"&gt; <code>Network.FiresRemote(self: Types.Network, remoteName: string, reliable: boolean, ...: any): ()</code> <Tag>Public</Tag> <Tag>Server</Tag>",id:"-networkfiresremoteself-typesnetwork-remotename-string-reliable-boolean--any--public-server",level:3},{value:"&gt; <code>Network.FireExceptRemote(self: Types.Network, remoteName: string, reliable: boolean, except: {Player}, ...: any): ()</code> <Tag>Public</Tag> <Tag>Server</Tag>",id:"-networkfireexceptremoteself-typesnetwork-remotename-string-reliable-boolean-except-player--any--public-server",level:3},{value:"&gt; <code>Network.Invoke(self: Types.Network, remoteName: string, timeout: number, player: Player, ...: any): (...any)</code> <Tag>Public</Tag> <Tag>Server</Tag>",id:"-networkinvokeself-typesnetwork-remotename-string-timeout-number-player-player--any-any-public-server",level:3},{value:"&gt; <code>Network.Destroy(self: Types.Network): ()</code> <Tag>Public</Tag>",id:"-networkdestroyself-typesnetwork--public",level:3}];function g(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:["Network - is a network abstraction layer for ",(0,o.jsx)(r.a,{href:"https://imezx.github.io/Warp/",children:"Warp"})," that works both ",(0,o.jsx)(r.code,{children:"Server/Client"}),". This can be inherited allowing you to easily do ",(0,o.jsx)(r.em,{children:"RPC calls"}),"."]}),"\n",(0,o.jsx)(r.h2,{id:"constructor",children:"Constructor"}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networknew-typesnetwork-public",children:["> ",(0,o.jsx)(r.code,{children:"Network.new(): Types.Network"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(r.p,{children:"Creates a new Network object that allows Server/Client communication."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\nlocal Remotes = require(script.Remotes)\r\n\r\nlocal network = Network.new() -- Create new Network object\r\nfor k, v in Remotes do\r\n\tif type(v) ~= "string" then\r\n\t\tcontinue\r\n\tend\r\n\tnetwork:CreateRemote(v, Remotes.SetupRemotes[k]) -- Create new Remote communication bridge\r\nend\r\nnetwork:Destroy() -- Destroy it (note: Remotes that were created are persistent)\n'})}),"\n",(0,o.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networkcreateremoteself-typesnetwork-remotename-string-conf-any--public-server-client",children:["> ",(0,o.jsx)(r.code,{children:"Network.CreateRemote(self: Types.Network, remoteName: string, conf: any?): ()"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})," ",(0,o.jsx)(i,{color:"#2596be",children:"Server"})," ",(0,o.jsx)(i,{color:"#70E860",children:"Client"})]}),"\n",(0,o.jsx)(r.p,{children:"Creates a new Remote communication bridge."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\n\r\nnetwork:CreateRemote("Egg") -- Create "Egg" Remote\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networkconnectremoteself-typesnetwork-remotename-string-callback-any----string-public-server-client",children:["> ",(0,o.jsx)(r.code,{children:"Network.ConnectRemote(self: Types.Network, remoteName: string, callback: (...any) -> ()): string"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})," ",(0,o.jsx)(i,{color:"#2596be",children:"Server"})," ",(0,o.jsx)(i,{color:"#70E860",children:"Client"})]}),"\n",(0,o.jsx)(r.p,{children:"Connects a function callback to a specified remote."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\n\r\n-- [Objects] --\r\nlocal network = Network.new()\r\n\r\n-- Connect to a "Egg" Remote (note: Remote must exists prior to trying connecting function callback to it)\r\nnetwork:ConnectRemote("Egg", function(name)\r\n    print("My name is:", name)\r\nend)\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networkconvertconnectionlikeself-typesnetwork-remotename-string-key-string-typesconnectionlike-public-server-client",children:["> ",(0,o.jsx)(r.code,{children:"Network.ConvertConnectionLike(self: Types.Network, remoteName: string, key: string): Types.ConnectionLike"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})," ",(0,o.jsx)(i,{color:"#2596be",children:"Server"})," ",(0,o.jsx)(i,{color:"#70E860",children:"Client"})]}),"\n",(0,o.jsxs)(r.p,{children:["Converts a connection ID to a ConnectionLike Object. This is usefull for automatic memory clean up when ",(0,o.jsx)(r.code,{children:":Destroy()"})," method is called."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\nlocal Trove = require(Modules.Utility.Trove)\r\n\r\n-- [Objects] --\r\nlocal network = Network.new()\r\nlocal trove = Trove.new()\r\n\r\n-- Add the connection to trove\r\ntrove:Add(network:ConvertConnectionLike("Egg", network:ConnectRemote("Egg", function(name)\r\n    print("My name is:", name)\r\nend)))\r\ntrove:Destroy() -- Destroying trove will disconnect the Remote connection which will release memory\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networkdisconnectremoteself-typesnetwork-remotename-string-key-string--public-server-client",children:["> ",(0,o.jsx)(r.code,{children:"Network.DisconnectRemote(self: Types.Network, remoteName: string, key: string): ()"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})," ",(0,o.jsx)(i,{color:"#2596be",children:"Server"})," ",(0,o.jsx)(i,{color:"#70E860",children:"Client"})]}),"\n",(0,o.jsx)(r.p,{children:"Disconnects a function callback from a remote with specified connection ID."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\n\r\n-- [Objects] --\r\nlocal network = Network.new()\r\n\r\n-- connection variable will store our ID connection\r\nlocal connection = network:ConnectRemote("Egg", function(isEgg: boolean) -- Assuming you have the "Egg" remote already\r\n    print("IsEgg", isEgg)\r\nend)\r\n\r\nnetwork:DisconnectRemote("Egg", connection) -- Effectively disconnects a function callback from the remote\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networkfireremoteself-typesnetwork-remotename-string-reliable-boolean-player-player--nil--any--public-server-client",children:["> ",(0,o.jsx)(r.code,{children:"Network.FireRemote(self: Types.Network, remoteName: string, reliable: boolean, player: Player | nil, ...: any): ()"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})," ",(0,o.jsx)(i,{color:"#2596be",children:"Server"})," ",(0,o.jsx)(i,{color:"#70E860",children:"Client"})]}),"\n",(0,o.jsxs)(r.p,{children:["Sends data to a specified remote to a specific ",(0,o.jsx)(r.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Player",children:"player"})," or server. \\"]}),"\n",(0,o.jsx)(r.admonition,{type:"note",children:(0,o.jsx)(r.p,{children:"Data will be compressed to reduce latency, but buffer objects can't be passed."})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",metastring:'title="ServerScriptService/Server.server.lua"',children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\n\r\n-- [Objects] --\r\nlocal network = Network.new()\r\n\r\nnetwork:CreateRemote("Egg") -- You must declare "Egg" remote both on server/client\r\n\r\nnetwork:ConnectRemote("Egg", function(isEgg: boolean)\r\n    print("IsEgg", isEgg)\r\nend)\n'})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",metastring:'title="StarterPlayer/StarterPlayerScripts/Client.client.lua"',children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\n\r\n-- [Objects] --\r\nlocal network = Network.new()\r\n\r\nnetwork:CreateRemote("Egg") -- You must declare "Egg" remote both on server/client\r\n\r\nwhile task.wait(1) do\r\n    network:FireRemote("Egg", true, nil, math.random() > 0.5) -- On client side we can\'t pass a Player to FireRemote() so we have to use nil\r\nend\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networkfiresremoteself-typesnetwork-remotename-string-reliable-boolean--any--public-server",children:["> ",(0,o.jsx)(r.code,{children:"Network.FiresRemote(self: Types.Network, remoteName: string, reliable: boolean, ...: any): ()"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})," ",(0,o.jsx)(i,{color:"#2596be",children:"Server"})]}),"\n",(0,o.jsxs)(r.p,{children:["Sends data to all ",(0,o.jsx)(r.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Player",children:"players"})," on the server."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",metastring:'title="ServerScriptService/Server.server.lua"',children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\n\r\n-- [Objects] --\r\nlocal network = Network.new()\r\n\r\nnetwork:CreateRemote("Egg") -- You must declare "Egg" remote both on server/client\r\n\r\nnetwork:FiresRemote("Egg", true, "I\'m the Egg!")\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networkfireexceptremoteself-typesnetwork-remotename-string-reliable-boolean-except-player--any--public-server",children:["> ",(0,o.jsx)(r.code,{children:"Network.FireExceptRemote(self: Types.Network, remoteName: string, reliable: boolean, except: {Player}, ...: any): ()"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})," ",(0,o.jsx)(i,{color:"#2596be",children:"Server"})]}),"\n",(0,o.jsxs)(r.p,{children:["Sends data to all players, but filters out certain players if they are in the ",(0,o.jsx)(r.code,{children:"except"})," filer."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",metastring:'title="ServerScriptService/Server.server.lua"',children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\n\r\n-- [Services] --\r\nlocal Players = game:GetService("Players")\r\n\r\n-- [Objects] --\r\nlocal network = Network.new()\r\n\r\nnetwork:CreateRemote("Egg") -- You must declare "Egg" remote both on server/client\r\n\r\nnetwork:FireRemoteExcept("Egg", true, { Players:GetPlayers()[math.random(1, #Players:GetPlayers())] } "I\'m the Egg!") -- A random player will not receive this message\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networkinvokeself-typesnetwork-remotename-string-timeout-number-player-player--any-any-public-server",children:["> ",(0,o.jsx)(r.code,{children:"Network.Invoke(self: Types.Network, remoteName: string, timeout: number, player: Player, ...: any): (...any)"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})," ",(0,o.jsx)(i,{color:"#2596be",children:"Server"})]}),"\n",(0,o.jsx)(r.p,{children:"Invokes Server/Client waiting for it to return a value"}),"\n",(0,o.jsx)(r.admonition,{type:"warning",children:(0,o.jsx)(r.p,{children:"This method Yields!"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",metastring:'title="ServerScriptService/Server.server.lua"',children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\n\r\n-- [Objects] --\r\nlocal network = Network.new()\r\n\r\nnetwork:CreateRemote("Egg") -- You must declare "Egg" remote both on server/client\r\n\r\nlocal player = Players:GetPlayers()[math.random(1, #Players:GetPlayers())]\r\nlocal result = network:Invoke("Egg", 60, player) -- Thread will yield here\r\nprint("IsEgg", result)\n'})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",metastring:'title="StarterPlayer/StarterPlayerScripts/Client.client.lua"',children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Modules] --\r\nlocal Network = require(Modules.Classes.Network)\r\n\r\n-- [Objects] --\r\nlocal network = Network.new()\r\n\r\nnetwork:CreateRemote("Egg") -- You must declare "Egg" remote both on server/client\r\n\r\nnetwork:ConnectRemote("Egg", function()\r\n    return math.random() > 0.5\r\nend)\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsxs)(r.h3,{id:"-networkdestroyself-typesnetwork--public",children:["> ",(0,o.jsx)(r.code,{children:"Network.Destroy(self: Types.Network): ()"})," ",(0,o.jsx)(i,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(r.p,{children:"Destroy's the Network object releasing it from memory."}),"\n",(0,o.jsx)(r.admonition,{type:"info",children:(0,o.jsx)(r.p,{children:"Remotes that were created in the network objects lifespan are persistant."})})]})}function m(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(6540);const o={},l=t.createContext(o);function s(e){const r=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(l.Provider,{value:r},e.children)}}}]);