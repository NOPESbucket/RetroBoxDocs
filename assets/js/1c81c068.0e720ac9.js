"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[693],{7205:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"api-class-reference/functions/bindToInstanceDestroyed","title":"bindToInstanceDestroyed","description":"When using Deferred signal mode: scripts parented to an object cannot listen to that object\'s Destroying event, since it is disconnected up before being executed.","source":"@site/docs/api-class-reference/functions/bindToInstanceDestroyed.md","sourceDirName":"api-class-reference/functions","slug":"/api-class-reference/functions/bindToInstanceDestroyed","permalink":"/RetroBoxDocs/docs/api-class-reference/functions/bindToInstanceDestroyed","draft":false,"unlisted":false,"editUrl":"https://github.com/NOPESbucket/RetroBox/edit/main/docs/api-class-reference/functions/bindToInstanceDestroyed.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"apiSidebar","previous":{"title":"Functions","permalink":"/RetroBoxDocs/docs/category/functions"},"next":{"title":"debugPrint","permalink":"/RetroBoxDocs/docs/api-class-reference/functions/debugPrint"}}');var s=t(4848),r=t(8453);const i={sidebar_position:1},c=void 0,a={},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"When using Deferred signal mode: scripts parented to an object cannot listen to that object's Destroying event, since it is disconnected up before being executed.\r\nTo avoid this, we'll use a hacky solution and clone a listener script into PlayerScripts.\r\nThis script will continue running after the instance is destroyed and allow us to run e.g. cleanup code when it gets destroyed."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="Workspace/Model/ModelScript.server.lua"',children:'-- [Packages] --\r\nlocal Modules = game.ReplicatedStorage.Modules\r\n\r\n-- [Functions] --\r\nlocal debugPrint = require(Modules.Functions.debugPrint)\r\n\r\n-- [Instances] --\r\nlocal model = script.Parent\r\n\r\n-- This will not run in Deffered mode, because script will be deleted before the Destroying event will be executed\r\nmodel.Destroying:Connect(function()\r\n    print("Destroying callback")\r\nend)\r\n\r\n-- This will run no matter\r\nbindToInstanceDestroyed(model, function()\r\n    print("bindToInstanceDestroye callback")\r\nend)\r\n\r\nmodel:Destroy()\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);