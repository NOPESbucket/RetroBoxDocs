"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9714],{6847:(e,i,r)=>{r.r(i),r.d(i,{Tag:()=>c,assets:()=>s,contentTitle:()=>l,default:()=>x,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api-class-reference/utility/Hitbox","title":"Hitbox","description":"Hitbox - special class which was made for easy to use and best response hitboxes. Instead of relying purely on Spatial Query API","source":"@site/docs/api-class-reference/utility/Hitbox.md","sourceDirName":"api-class-reference/utility","slug":"/api-class-reference/utility/Hitbox","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox","draft":false,"unlisted":false,"editUrl":"https://github.com/NOPESbucket/RetroBox/edit/main/docs/api-class-reference/utility/Hitbox.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"apiSidebar","previous":{"title":"DynamicOctree","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree"},"next":{"title":"MouseModule","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule"}}');var o=r(4848),n=r(8453);const a={sidebar_position:8},l=void 0,s={},c=({children:e,color:i})=>(0,o.jsx)("span",{style:{fontSize:"0.75em",backgroundColor:i,borderRadius:"4px",color:"#fff",padding:"0.2rem 0.5rem",fontWeight:"bold"},children:e}),d=[{value:"Types",id:"types",level:2},{value:"HitboxConfiguration",id:"hitboxconfiguration",level:3},{value:"&gt; <code>HitboxType: &quot;Magnitude&quot; | &quot;Spatial&quot;</code>",id:"-hitboxtype-magnitude--spatial",level:4},{value:"&gt; <code>Shape: &quot;Box&quot; | &quot;Sphere&quot;</code>",id:"-shape-box--sphere",level:4},{value:"&gt; <code>Owner: Player?</code>",id:"-owner-player",level:4},{value:"HitboxParams",id:"hitboxparams",level:3},{value:"&gt; <code>HitboxType: &quot;Magnitude&quot; | &quot;Spatial&quot;</code>",id:"-hitboxtype-magnitude--spatial-1",level:4},{value:"&gt; <code>Shape: &quot;Box&quot; | &quot;Sphere&quot;</code>",id:"-shape-box--sphere-1",level:4},{value:"&gt; <code>Debug: boolean</code>",id:"-debug-boolean",level:4},{value:"&gt; <code>Size: Vector3</code>",id:"-size-vector3",level:4},{value:"&gt; <code>CFrame: CFrame?</code>",id:"-cframe-cframe",level:4},{value:"&gt; <code>Owner: Player?</code>",id:"-owner-player-1",level:4},{value:"Properties",id:"properties",level:2},{value:"&gt; <code>Size: Vector3</code> <Tag>Public</Tag>",id:"-size-vector3-public",level:3},{value:"&gt; <code>CFrame: CFrame</code> <Tag>Public</Tag>",id:"-cframe-cframe-public",level:3},{value:"&gt; <code>Debug: boolean</code> <Tag>Public</Tag>",id:"-debug-boolean-public",level:3},{value:"&gt; <code>Hit: Signal.Signal&lt;BasePart&gt;</code> <Tag>Public</Tag>",id:"-hit-signalsignalbasepart-public",level:3},{value:"&gt; <code>Exit: Signal.Signal&lt;BasePart&gt;</code> <Tag>Public</Tag>",id:"-exit-signalsignalbasepart-public",level:3},{value:"&gt; <code>HumanoidHit: Signal.Signal&lt;Humanoid&gt;</code> <Tag>Public</Tag>",id:"-humanoidhit-signalsignalhumanoid-public",level:3},{value:"&gt; <code>HumanoidExit: Signal.Signal&lt;Humanoid&gt;</code> <Tag>Public</Tag>",id:"-humanoidexit-signalsignalhumanoid-public",level:3},{value:"&gt; <code>_hitboxOctree: </code> <code>DOS</code> <Tag>Private</Tag>",id:"-_hitboxoctree--dos-private",level:3},{value:"&gt; <code>_trackedInstances: { [Model]: BasePart }</code> <Tag>Private</Tag>",id:"-_trackedinstances--model-basepart--private",level:3},{value:"&gt; <code>_collidedInstances: { [Model]: { [BasePart]: boolean } }</code> <Tag>Private</Tag>",id:"-_collidedinstances--model--basepart-boolean---private",level:3},{value:"&gt; <code>_collidedHumanoids: { [Model]: boolean }</code> <Tag>Private</Tag>",id:"-_collidedhumanoids--model-boolean--private",level:3},{value:"&gt; <code>_previousProperties: { [string]: any }</code> <Tag>Private</Tag>",id:"-_previousproperties--string-any--private",level:3},{value:"&gt; <code>_history: { any }</code> <Tag>Private</Tag>",id:"-_history--any--private",level:3},{value:"&gt; <code>_hitboxPart: Part</code> <Tag>Private</Tag>",id:"-_hitboxpart-part-private",level:3},{value:"&gt; <code>_partWeld: BasePart?</code> <Tag>Private</Tag>",id:"-_partweld-basepart-private",level:3},{value:"&gt; <code>_velocity: Vector3</code> <Tag>Private</Tag>",id:"-_velocity-vector3-private",level:3},{value:"&gt; <code>_lastCFrame: CFrame</code> <Tag>Private</Tag>",id:"-_lastcframe-cframe-private",level:3},{value:"&gt; <code>_weldOffset: CFrame</code> <Tag>Private</Tag>",id:"-_weldoffset-cframe-private",level:3},{value:"&gt; <code>_trove: </code> <code>Trove.Trove</code> <Tag>Private</Tag>",id:"-_trove--trovetrove-private",level:3},{value:"&gt; <code>_enabled: boolean</code> <Tag>Private</Tag>",id:"-_enabled-boolean-private",level:3},{value:"&gt; <code>_steppedConnection: RBXScriptConnection?</code> <Tag>Private</Tag>",id:"-_steppedconnection-rbxscriptconnection-private",level:3},{value:"&gt; <code>_config: HitboxConfiguration</code> <Tag>Private</Tag> <Tag>\ud83d\udd12Read-Only</Tag>",id:"-_config-hitboxconfiguration-private-read-only",level:3},{value:"Constructors",id:"constructors",level:2},{value:"&gt; <code>Hitbox.new(hitboxParams: HitboxParams)</code>",id:"-hitboxnewhitboxparams-hitboxparams",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>Hitbox:ClearTaggedChars()</code> <Tag>Public</Tag>",id:"hitboxcleartaggedchars-public",level:3},{value:"<code>Hitbox:Start()</code> <Tag>Public</Tag>",id:"hitboxstart-public",level:3},{value:"<code>Hitbox:WeldTo(weldTo: BasePart, offset: CFrame)</code> <Tag>Public</Tag>",id:"hitboxweldtoweldto-basepart-offset-cframe-public",level:3},{value:"<code>Hitbox:Unweld()</code> <Tag>Public</Tag>",id:"hitboxunweld-public",level:3},{value:"<code>Hitbox:ChangeWeldOffset(newOffset: CFrame)</code> <Tag>Public</Tag>",id:"hitboxchangeweldoffsetnewoffset-cframe-public",level:3},{value:"<code>Hitbox:Stop()</code> <Tag>Public</Tag>",id:"hitboxstop-public",level:3},{value:"<code>Hitbox:_getClosestPosition(character: Model, now: number): Vector3</code> <Tag>Private</Tag>",id:"hitbox_getclosestpositioncharacter-model-now-number-vector3-private",level:3},{value:"<code>Hitbox:_getCFrame(): CFrame</code> <Tag>Private</Tag>",id:"hitbox_getcframe-cframe-private",level:3},{value:"<code>Hitbox:_getRewindCFrame(character: Model, part: BasePart, desiredTime: number): CFrame?</code> <Tag>Private</Tag>",id:"hitbox_getrewindcframecharacter-model-part-basepart-desiredtime-number-cframe-private",level:3},{value:"<code>Hitbox:_trackCharacter(character: Model)</code> <Tag>Private</Tag>",id:"hitbox_trackcharactercharacter-model-private",level:3},{value:"<code>Hitbox:_replicateProperties()</code> <Tag>Private</Tag>",id:"hitbox_replicateproperties-private",level:3},{value:"<code>Hitbox:_updateDebugHitbox()</code> <Tag>Private</Tag>",id:"hitbox_updatedebughitbox-private",level:3},{value:"<code>Hitbox:_runSpatialQueryCollision()</code> <Tag>Private</Tag>",id:"hitbox_runspatialquerycollision-private",level:3},{value:"<code>Hitbox:_runMagnitudeCollision()</code> <Tag>Private</Tag>",id:"hitbox_runmagnitudecollision-private",level:3},{value:"<code>Hitbox:_updateHitboxOctree()</code> <Tag>Private</Tag>",id:"hitbox_updatehitboxoctree-private",level:3},{value:"<code>Hitbox:_updateVelocity(dt: number)</code> <Tag>Private</Tag>",id:"hitbox_updatevelocitydt-number-private",level:3},{value:"<code>Hitbox:_runMagnitudeQuery(character: Model, desiredTime: number?)</code> <Tag>Private</Tag>",id:"hitbox_runmagnitudequerycharacter-model-desiredtime-number-private",level:3},{value:"<code>Hitbox:Destroy()</code> <Tag>Public</Tag>",id:"hitboxdestroy-public",level:3}];function h(e){const i={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i.p,{children:["Hitbox - special class which was made for easy to use and best response hitboxes. Instead of relying purely on Spatial Query API\r\n(e.g. ",(0,o.jsx)(i.code,{children:"WorldRoot:GetPartBoundsInBox"}),", ",(0,o.jsx)(i.code,{children:"WorldRoot:GetPartBoundsInRadius"}),", ",(0,o.jsx)(i.code,{children:"WorldRoot:GetPartsInPart"}),") which you mostly do on server for security reasons. This hitbox implementation lets you set network ownership and based on that network owner checks for the collision results."]}),"\n",(0,o.jsx)(i.admonition,{type:"note",children:(0,o.jsx)(i.p,{children:"All of the data sent by client and collision results will be verified by server, before firing any events prior."})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-lua",metastring:'title="ServerScriptService/HitboxTest.server.lua"',children:'-- [Modules] --\r\nlocal Hitbox = require(game.ReplicatedStorage.Hitbox)\r\n\r\n-- [Services] --\r\nlocal Players = game:GetService("Players")\r\n\r\n-- [Instances] --\r\nlocal aliveCharacters = workspace.AliveCharacters\r\n\r\n-- [Functions] --\r\n\r\nlocal function createHitbox(position: Vector3, owner: Player?)\t\r\n\tlocal hitbox = Hitbox.new({\r\n\t\tHitboxType = "Magnitude",\r\n\t\tShape = "Box",\r\n\t\tDebug = true,\r\n\t\tSize = Vector3.new(7, 7, 6.5),\r\n\t\tCFrame = CFrame.new(position),\r\n\t\tOwner = owner,\r\n\t})\r\n\thitbox:WeldTo(owner.Character.PrimaryPart, CFrame.new(0, 0, -4.5))\r\n\thitbox.Hit:Connect(function(basePart)\r\n\t\tprint("Hit:", basePart)\r\n\tend)\r\n\thitbox.Exit:Connect(function(basePart)\r\n\t\tprint("Exit:", basePart)\r\n\tend)\r\n\thitbox.HumanoidHit:Connect(function(humanoid)\r\n\t\tif (owner and humanoid.Parent.Name == owner.Name) or false then\r\n\t\t\treturn\r\n\t\tend\r\n\t\tprint("HumanoidHit:", humanoid.Parent, humanoid)\r\n\tend)\r\n\thitbox.HumanoidExit:Connect(function(humanoid)\r\n\t\tif (owner and humanoid.Parent.Name == owner.Name) or false then\r\n\t\t\treturn\r\n\t\tend\r\n\t\tprint("HumanoidExit:", humanoid.Parent, humanoid)\r\n\tend)\r\n\t\r\n\thitbox:Start()\r\nend\r\n\r\nlocal function onPlayerAdded(player: Player)\r\n\tlocal character = player.Character\r\n\tif character then\r\n\t\tcharacter.Parent = aliveCharacters\r\n\tend\r\n\r\n\tplayer.CharacterAdded:Connect(function(character)\r\n\t\tcharacter.Parent = aliveCharacters\r\n\t\t\r\n\t\ttask.wait(5)\r\n\r\n\t\tcreateHitbox(Vector3.new(0, 2, 0), player)\r\n\tend)\r\nend\r\n\r\n-- [Main] --\r\n\r\nPlayers.PlayerAdded:Connect(onPlayerAdded)\r\nfor _, player in Players:GetPlayers() do\r\n\tonPlayerAdded(player)\r\nend\n'})}),"\n",(0,o.jsx)(i.h2,{id:"types",children:"Types"}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"hitboxconfiguration",children:"HitboxConfiguration"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-lua",children:'type HitboxConfiguration = {\r\n\tHitboxType: "Magnitude" | "Spatial",\r\n\tShape: "Box" | "Sphere",\r\n\tOwner: Player?,\r\n\tId: number,\r\n}\n'})}),"\n",(0,o.jsxs)(i.h4,{id:"-hitboxtype-magnitude--spatial",children:["> ",(0,o.jsx)(i.code,{children:'HitboxType: "Magnitude" | "Spatial"'})]}),"\n",(0,o.jsxs)(i.p,{children:["Sets the type of the Hitbox. If set to ",(0,o.jsx)(i.code,{children:"Magnitude"}),", hitbox will perform magnitude checks which will determine the collision result"]}),"\n",(0,o.jsx)(i.admonition,{type:"info",children:(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"Magnitude"})," checks will be based on the AABB (Axis Aligned Bounding Box) instead of the typical sphere."]})}),"\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"Spatial"})," hitboxes use Roblox's ",(0,o.jsx)(i.a,{href:"https://devforum.roblox.com/t/introducing-overlapparams-new-spatial-query-api/1435720",children:"Spatial Query API"})," which may yield to better results, but takes longer to compute due to Roblox engine accounting for every part in Octree."]}),"\n",(0,o.jsxs)(i.h4,{id:"-shape-box--sphere",children:["> ",(0,o.jsx)(i.code,{children:'Shape: "Box" | "Sphere"'})]}),"\n",(0,o.jsxs)(i.p,{children:["Sets the hitbox collision Shape. Can be only ",(0,o.jsx)(i.code,{children:"Box"})," or ",(0,o.jsx)(i.code,{children:"Sphere"})," hitbox."]}),"\n",(0,o.jsxs)(i.h4,{id:"-owner-player",children:["> ",(0,o.jsx)(i.code,{children:"Owner: Player?"})]}),"\n",(0,o.jsx)(i.p,{children:"Determines who's the owner of the hitbox and who will perform collision checks"}),"\n",(0,o.jsx)(i.admonition,{type:"note",children:(0,o.jsx)(i.p,{children:"All of the data and collisions sent from client are verified before firing any events prior."})}),"\n",(0,o.jsxs)(i.p,{children:["When Player is set as the network owner, hitbox will ",(0,o.jsx)(i.strong,{children:"BE"})," replicated to it and client will continuously check for collisions. If client detects collision it will sent data to server to verify.",(0,o.jsx)(i.br,{}),"\n","When Server is set as the network owner, hitbox will ",(0,o.jsx)(i.strong,{children:"NOT"})," be replicated and all of collision operations will be performed on server-side completely. Don't use server owned hitboxes when doing any kind of interaction player is responsible, best for NPC's or any other stuff server is in charge of."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"hitboxparams",children:"HitboxParams"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-lua",children:'type HitboxParams = {\r\n\tHitboxType: "Magnitude" | "Spatial",\r\n\tShape: "Box" | "Sphere",\r\n\tDebug: boolean,\r\n\tSize: Vector3,\r\n\tCFrame: CFrame?,\r\n\tOwner: Player?,\r\n}\n'})}),"\n",(0,o.jsxs)(i.h4,{id:"-hitboxtype-magnitude--spatial-1",children:["> ",(0,o.jsx)(i.code,{children:'HitboxType: "Magnitude" | "Spatial"'})]}),"\n",(0,o.jsxs)(i.p,{children:["Sets the type of the Hitbox. If set to ",(0,o.jsx)(i.code,{children:"Magnitude"}),", hitbox will perform magnitude checks which will determine the collision result"]}),"\n",(0,o.jsx)(i.admonition,{type:"info",children:(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"Magnitude"})," checks will be based on the AABB (Axis Aligned Bounding Box) instead of the typical sphere."]})}),"\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"Spatial"})," hitboxes use Roblox's ",(0,o.jsx)(i.a,{href:"https://devforum.roblox.com/t/introducing-overlapparams-new-spatial-query-api/1435720",children:"Spatial Query API"})," which may yield to better results, but takes longer to compute due to Roblox engine accounting for every part in Octree."]}),"\n",(0,o.jsxs)(i.h4,{id:"-shape-box--sphere-1",children:["> ",(0,o.jsx)(i.code,{children:'Shape: "Box" | "Sphere"'})]}),"\n",(0,o.jsxs)(i.p,{children:["Sets the hitbox collision Shape. Can be only ",(0,o.jsx)(i.code,{children:"Box"})," or ",(0,o.jsx)(i.code,{children:"Sphere"})," hitbox."]}),"\n",(0,o.jsxs)(i.h4,{id:"-debug-boolean",children:["> ",(0,o.jsx)(i.code,{children:"Debug: boolean"})]}),"\n",(0,o.jsx)(i.p,{children:"Determines whether collision debug is enabled. If hitbox has network owner that's Player, debug collision will be shown on network owners side too."}),"\n",(0,o.jsxs)(i.h4,{id:"-size-vector3",children:["> ",(0,o.jsx)(i.code,{children:"Size: Vector3"})]}),"\n",(0,o.jsx)(i.p,{children:"Sets the size of the Hitbox."}),"\n",(0,o.jsxs)(i.h4,{id:"-cframe-cframe",children:["> ",(0,o.jsx)(i.code,{children:"CFrame: CFrame?"})]}),"\n",(0,o.jsx)(i.p,{children:"Sets the CFrame of the Hitbox in world space."}),"\n",(0,o.jsxs)(i.h4,{id:"-owner-player-1",children:["> ",(0,o.jsx)(i.code,{children:"Owner: Player?"})]}),"\n",(0,o.jsx)(i.p,{children:"Determines who's the owner of the hitbox and who will perform collision checks"}),"\n",(0,o.jsx)(i.admonition,{type:"note",children:(0,o.jsx)(i.p,{children:"All of the data and collisions sent from client are verified before firing any events prior."})}),"\n",(0,o.jsxs)(i.p,{children:["When Player is set as the network owner, hitbox will ",(0,o.jsx)(i.strong,{children:"BE"})," replicated to it and client will continuously check for collisions. If client detects collision it will sent data to server to verify.",(0,o.jsx)(i.br,{}),"\n","When Server is set as the network owner, hitbox will ",(0,o.jsx)(i.strong,{children:"NOT"})," be replicated and all of collision operations will be performed on server-side completely. Don't use server owned hitboxes when doing any kind of interaction player is responsible, best for NPC's or any other stuff server is in charge of."]}),"\n",(0,o.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-size-vector3-public",children:["> ",(0,o.jsx)(i.code,{children:"Size: Vector3"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.p,{children:"Determines the Size of the hitbox."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-cframe-cframe-public",children:["> ",(0,o.jsx)(i.code,{children:"CFrame: CFrame"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.p,{children:"Current position and orientation of the hitbox in world."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-debug-boolean-public",children:["> ",(0,o.jsx)(i.code,{children:"Debug: boolean"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.p,{children:"Determines whether debug hitboxes are visible or not. Don't use it in production it may cause huge lag with large amount of hitboxes."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-hit-signalsignalbasepart-public",children:["> ",(0,o.jsx)(i.code,{children:"Hit: Signal.Signal<BasePart>"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsxs)(i.p,{children:["Fires whenever a ",(0,o.jsx)(i.a,{href:"https://create.roblox.com/docs/reference/engine/classes/BasePart",children:"BasePart"})," enters the hitbox."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-exit-signalsignalbasepart-public",children:["> ",(0,o.jsx)(i.code,{children:"Exit: Signal.Signal<BasePart>"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsxs)(i.p,{children:["Fires whenever a ",(0,o.jsx)(i.a,{href:"https://create.roblox.com/docs/reference/engine/classes/BasePart",children:"BasePart"})," exits the hitbox, if it was inside before."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-humanoidhit-signalsignalhumanoid-public",children:["> ",(0,o.jsx)(i.code,{children:"HumanoidHit: Signal.Signal<Humanoid>"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsxs)(i.p,{children:["Fires whenever a ",(0,o.jsx)(i.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Humanoid",children:"Humanoid"})," Character enters the hitbox."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-humanoidexit-signalsignalhumanoid-public",children:["> ",(0,o.jsx)(i.code,{children:"HumanoidExit: Signal.Signal<Humanoid>"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsxs)(i.p,{children:["Fires whenever a ",(0,o.jsx)(i.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Humanoid",children:"Humanoid"})," Character exits the hitbox, if it was inside before."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_hitboxoctree--dos-private",children:["> ",(0,o.jsx)(i.code,{children:"_hitboxOctree: "})," ",(0,o.jsx)(i.a,{href:"/RetroBoxDocs/docs/api-class-reference/utility/DynamicOctree",children:(0,o.jsx)(i.code,{children:"DOS"})})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Reference to the Octree which hitbox uses to track objects."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_trackedinstances--model-basepart--private",children:["> ",(0,o.jsx)(i.code,{children:"_trackedInstances: { [Model]: BasePart }"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Reference to a HashMap of tracked Character's."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_collidedinstances--model--basepart-boolean---private",children:["> ",(0,o.jsx)(i.code,{children:"_collidedInstances: { [Model]: { [BasePart]: boolean } }"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsxs)(i.p,{children:["Reference to a HashMap of currently colliding ",(0,o.jsx)(i.a,{href:"https://create.roblox.com/docs/reference/engine/classes/BasePart",children:"BaseParts"}),"."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_collidedhumanoids--model-boolean--private",children:["> ",(0,o.jsx)(i.code,{children:"_collidedHumanoids: { [Model]: boolean }"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsxs)(i.p,{children:["Reference to a HashMap of currently colliding ",(0,o.jsx)(i.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Humanoid",children:"Humanoids"}),"."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_previousproperties--string-any--private",children:["> ",(0,o.jsx)(i.code,{children:"_previousProperties: { [string]: any }"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_history--any--private",children:["> ",(0,o.jsx)(i.code,{children:"_history: { any }"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Reference to a previously recorded CFrames of the tracked objects. This is used to rewind to a certain point in time to verify a collision sent by client."}),"\n",(0,o.jsx)(i.admonition,{type:"note",children:(0,o.jsxs)(i.p,{children:["_history is used in ",(0,o.jsx)(i.code,{children:"Magnitude"})," hitboxes only, ",(0,o.jsx)(i.code,{children:"Spatial"})," hitboxes don't have support for it yet."]})}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_hitboxpart-part-private",children:["> ",(0,o.jsx)(i.code,{children:"_hitboxPart: Part"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Reference to a Part which represents the hitbox in world. Primaraly used for debug purposes."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_partweld-basepart-private",children:["> ",(0,o.jsx)(i.code,{children:"_partWeld: BasePart?"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_velocity-vector3-private",children:["> ",(0,o.jsx)(i.code,{children:"_velocity: Vector3"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_lastcframe-cframe-private",children:["> ",(0,o.jsx)(i.code,{children:"_lastCFrame: CFrame"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Previous CFrame to the last processed CFrame."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_weldoffset-cframe-private",children:["> ",(0,o.jsx)(i.code,{children:"_weldOffset: CFrame"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_trove--trovetrove-private",children:["> ",(0,o.jsx)(i.code,{children:"_trove: "})," ",(0,o.jsx)(i.a,{href:"/RetroBoxDocs/docs/api-class-reference/utility/Trove",children:(0,o.jsx)(i.code,{children:"Trove.Trove"})})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_enabled-boolean-private",children:["> ",(0,o.jsx)(i.code,{children:"_enabled: boolean"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Determines whether hitbox is active or not."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_steppedconnection-rbxscriptconnection-private",children:["> ",(0,o.jsx)(i.code,{children:"_steppedConnection: RBXScriptConnection?"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsxs)(i.p,{children:["Reference to a ",(0,o.jsx)(i.a,{href:"https://create.roblox.com/docs/reference/engine/classes/RunService#Stepped",children:"RunService.Stepped"})," ",(0,o.jsx)(i.a,{href:"https://create.roblox.com/docs/reference/engine/datatypes/RBXScriptConnection",children:"RBXScriptConnection"}),"."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-_config-hitboxconfiguration-private-read-only",children:["> ",(0,o.jsx)(i.code,{children:"_config: HitboxConfiguration"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})," ",(0,o.jsx)(c,{color:"#E66F59",children:"\ud83d\udd12Read-Only"})]}),"\n",(0,o.jsxs)(i.p,{children:["A Read-Only reference of the passed ",(0,o.jsx)(i.code,{children:"HitboxConfiguration"})," which is used to setup hitbox and later replicate the hitbox state to the client if network owner is set."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h2,{id:"constructors",children:"Constructors"}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"-hitboxnewhitboxparams-hitboxparams",children:["> ",(0,o.jsx)(i.code,{children:"Hitbox.new(hitboxParams: HitboxParams)"})]}),"\n",(0,o.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitboxcleartaggedchars-public",children:[(0,o.jsx)(i.code,{children:"Hitbox:ClearTaggedChars()"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitboxstart-public",children:[(0,o.jsx)(i.code,{children:"Hitbox:Start()"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.p,{children:"Starts the hitbox collision checking."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitboxweldtoweldto-basepart-offset-cframe-public",children:[(0,o.jsx)(i.code,{children:"Hitbox:WeldTo(weldTo: BasePart, offset: CFrame)"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.p,{children:"Weld the hitbox to the specified BasePart with Offset. Hitbox will keep the orientation and position relative to the specified BasePart."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitboxunweld-public",children:[(0,o.jsx)(i.code,{children:"Hitbox:Unweld()"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.p,{children:"Unwelds the hitbox from the part to which it was welded to. Orientation will be kept to the last CFrame."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitboxchangeweldoffsetnewoffset-cframe-public",children:[(0,o.jsx)(i.code,{children:"Hitbox:ChangeWeldOffset(newOffset: CFrame)"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.p,{children:"Changes the hitbox's weld offset. Hitbox must be welded before this method is called."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitboxstop-public",children:[(0,o.jsx)(i.code,{children:"Hitbox:Stop()"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.p,{children:"Stops the hitbox collision checking."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_getclosestpositioncharacter-model-now-number-vector3-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_getClosestPosition(character: Model, now: number): Vector3"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsxs)(i.p,{children:["Returns the closets position of the character to a hitbox. This method used for ",(0,o.jsx)(i.code,{children:"Magnitude"})," hitbox tests."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_getcframe-cframe-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_getCFrame(): CFrame"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Returns the hitbox CFrame."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_getrewindcframecharacter-model-part-basepart-desiredtime-number-cframe-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_getRewindCFrame(character: Model, part: BasePart, desiredTime: number): CFrame?"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsxs)(i.p,{children:["Returns the rewind cframe of the character's body part to a specific time. May not always return CFrame due to data being expired and removed. This method used for ",(0,o.jsx)(i.code,{children:"Magnitude"})," hitbox tests."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_trackcharactercharacter-model-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_trackCharacter(character: Model)"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Starts tracking character."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_replicateproperties-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_replicateProperties()"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Replicates properties of the hitbox to a network owner."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_updatedebughitbox-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_updateDebugHitbox()"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Updates the debug part orientation."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_runspatialquerycollision-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_runSpatialQueryCollision()"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Runs the SpatialQueryCollision test."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_runmagnitudecollision-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_runMagnitudeCollision()"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Runs the MagnitudeCollision test."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_updatehitboxoctree-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_updateHitboxOctree()"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Updates the hitbox's Octree keeping data up to date."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_updatevelocitydt-number-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_updateVelocity(dt: number)"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsxs)(i.p,{children:["Updates the hitbox's velocity to compenstate for lag when welded to a part whose owner is ",(0,o.jsx)(i.strong,{children:"NOT"})," server."]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitbox_runmagnitudequerycharacter-model-desiredtime-number-private",children:[(0,o.jsx)(i.code,{children:"Hitbox:_runMagnitudeQuery(character: Model, desiredTime: number?)"})," ",(0,o.jsx)(c,{color:"#4958df",children:"Private"})]}),"\n",(0,o.jsx)(i.p,{children:"Performs a magnitude query, checking against every tracked instance."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsxs)(i.h3,{id:"hitboxdestroy-public",children:[(0,o.jsx)(i.code,{children:"Hitbox:Destroy()"})," ",(0,o.jsx)(c,{color:"#e3ce8b",children:"Public"})]}),"\n",(0,o.jsx)(i.p,{children:"Destroy's the Hitbox, releasing it from memory. Replicated hitboxes will be automatically deleted."}),"\n",(0,o.jsx)(i.hr,{})]})}function x(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,i,r)=>{r.d(i,{R:()=>a,x:()=>l});var t=r(6540);const o={},n=t.createContext(o);function a(e){const i=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(n.Provider,{value:i},e.children)}}}]);