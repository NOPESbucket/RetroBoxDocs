"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9138],{5595:(e,s,t)=>{t.r(s),t.d(s,{Tag:()=>d,assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"api-class-reference/utility/MouseModule","title":"MouseModule","description":"MouseModule - utility module used to replicate the behavior of Roblox\'s legacy Mouse instance with the addition of usefull features.","source":"@site/docs/api-class-reference/utility/MouseModule.md","sourceDirName":"api-class-reference/utility","slug":"/api-class-reference/utility/MouseModule","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/MouseModule","draft":false,"unlisted":false,"editUrl":"https://github.com/NOPESbucket/RetroBox/edit/main/docs/api-class-reference/utility/MouseModule.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"apiSidebar","previous":{"title":"Hitbox","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/Hitbox"},"next":{"title":"ObjectPool","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool"}}');var n=t(4848),r=t(8453);const i={sidebar_position:9},c=void 0,l={},d=({children:e,color:s})=>(0,n.jsx)("span",{style:{fontSize:"0.75em",backgroundColor:s,borderRadius:"4px",color:"#fff",padding:"0.2rem 0.5rem",fontWeight:"bold"},children:e}),a=[{value:"Properties",id:"properties",level:2},{value:"&gt; <code>collisionGroup: string</code>",id:"-collisiongroup-string",level:3},{value:"&gt; <code>filterDescendants: { any }</code>",id:"-filterdescendants--any-",level:3},{value:"&gt; <code>filterType: Enum.RaycastFilterType</code>",id:"-filtertype-enumraycastfiltertype",level:3},{value:"&gt; <code>rayLenght: number</code>",id:"-raylenght-number",level:3},{value:"&gt; <code>currentPosition: Vector2</code>",id:"-currentposition-vector2",level:3},{value:"&gt; <code>previousPosition: Vector2</code>",id:"-previousposition-vector2",level:3},{value:"&gt; <code>ticks: number</code>",id:"-ticks-number",level:3},{value:"Constructor",id:"constructor",level:2},{value:"&gt; <code>Mouse.new()</code>",id:"-mousenew",level:3},{value:"Methods",id:"methods",level:2},{value:"&gt; <code>Mouse:GetViewSize(): Vector2</code>",id:"-mousegetviewsize-vector2",level:3},{value:"&gt; <code>Mouse:GetPosition(): Vector3</code>",id:"-mousegetposition-vector3",level:3},{value:"&gt; <code>Mouse:GetUnitRay(): Ray</code>",id:"-mousegetunitray-ray",level:3},{value:"&gt; <code>Mouse:GetOrigin(): Vector3</code>",id:"-mousegetorigin-vector3",level:3},{value:"&gt; <code>Mouse:GetDelta(): Vector3</code>",id:"-mousegetdelta-vector3",level:3},{value:"&gt; <code>Mouse:ScreenPointToRay(): RaycastParameters</code>",id:"-mousescreenpointtoray-raycastparameters",level:3},{value:"&gt; <code>Mouse:CastRay()</code>",id:"-mousecastray",level:3},{value:"&gt; <code>Mouse:GetHit(): Vector3</code>",id:"-mousegethit-vector3",level:3},{value:"&gt; <code>Mouse:GetTarget()</code>",id:"-mousegettarget",level:3},{value:"&gt; <code>Mouse:GetTargetFilter()</code>",id:"-mousegettargetfilter",level:3},{value:"&gt; <code>Mouse:SetCollisionGroup(groupName: string)</code>",id:"-mousesetcollisiongroupgroupname-string",level:3},{value:"&gt; <code>Mouse:SetTargetFilter(object: Instance | {Instance})</code>",id:"-mousesettargetfilterobject-instance--instance",level:3},{value:"&gt; <code>Mouse:GetRayLength()</code>",id:"-mousegetraylength",level:3},{value:"&gt; <code>Mouse:SetRayLength(length: number)</code>",id:"-mousesetraylengthlength-number",level:3},{value:"&gt; <code>Mouse:GetFilterType(): Enum.RaycastFilterType</code>",id:"-mousegetfiltertype-enumraycastfiltertype",level:3},{value:"&gt; <code>Mouse:SetFilterType(filterType: Enum.RaycastFilterType)</code>",id:"-mousesetfiltertypefiltertype-enumraycastfiltertype",level:3},{value:"&gt; <code>Mouse:EnableIcon()</code>",id:"-mouseenableicon",level:3},{value:"&gt; <code>Mouse:DisableIcon()</code>",id:"-mousedisableicon",level:3},{value:"&gt; <code>Mouse:Destroy()</code>",id:"-mousedestroy",level:3}];function u(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["MouseModule - utility module used to replicate the behavior of Roblox's legacy ",(0,n.jsx)(s.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Mouse",children:"Mouse"})," instance with the addition of usefull features."]}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-collisiongroup-string",children:["> ",(0,n.jsx)(s.code,{children:"collisionGroup: string"})]}),"\n",(0,n.jsx)(s.p,{children:"Represents in which collision group mouse will test collision."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-filterdescendants--any-",children:["> ",(0,n.jsx)(s.code,{children:"filterDescendants: { any }"})]}),"\n",(0,n.jsxs)(s.p,{children:["An array of instance that will be filtered when performing collision test depending what ",(0,n.jsx)(s.code,{children:"filerType"})," was set."]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-filtertype-enumraycastfiltertype",children:["> ",(0,n.jsx)(s.code,{children:"filterType: Enum.RaycastFilterType"})]}),"\n",(0,n.jsxs)(s.p,{children:["Sets the filtering behavior for ",(0,n.jsx)(s.code,{children:"filterDescendants"})," property."]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-raylenght-number",children:["> ",(0,n.jsx)(s.code,{children:"rayLenght: number"})]}),"\n",(0,n.jsx)(s.p,{children:"Sets the lenght of how far mouse can test the collision."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-currentposition-vector2",children:["> ",(0,n.jsx)(s.code,{children:"currentPosition: Vector2"})]}),"\n",(0,n.jsx)(s.p,{children:"Current position of the mouse on a screen."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-previousposition-vector2",children:["> ",(0,n.jsx)(s.code,{children:"previousPosition: Vector2"})]}),"\n",(0,n.jsx)(s.p,{children:"Previous position of the mouse on a screen."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-ticks-number",children:["> ",(0,n.jsx)(s.code,{children:"ticks: number"})]}),"\n",(0,n.jsx)(s.p,{children:"Last time when mouse was updated."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"constructor",children:"Constructor"}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousenew",children:["> ",(0,n.jsx)(s.code,{children:"Mouse.new()"})]}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegetviewsize-vector2",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetViewSize(): Vector2"})]}),"\n",(0,n.jsx)(s.p,{children:"Returns the viewport size in which mouse operates."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegetposition-vector3",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetPosition(): Vector3"})]}),"\n",(0,n.jsx)(s.p,{children:"Returns the current position of the mouse on the screen."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegetunitray-ray",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetUnitRay(): Ray"})]}),"\n",(0,n.jsxs)(s.p,{children:["Returns the ",(0,n.jsx)(s.a,{href:"https://create.roblox.com/docs/reference/engine/datatypes/Ray",children:"Ray"})," of the mouse."]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegetorigin-vector3",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetOrigin(): Vector3"})]}),"\n",(0,n.jsx)(s.p,{children:"Returns the mouse origin in 3D world."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegetdelta-vector3",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetDelta(): Vector3"})]}),"\n",(0,n.jsx)(s.p,{children:"Returns the mouse delta position."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousescreenpointtoray-raycastparameters",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:ScreenPointToRay(): RaycastParameters"})]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousecastray",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:CastRay()"})]}),"\n",(0,n.jsx)(s.p,{children:"Casts a raycast in 3D world based on mouse position."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegethit-vector3",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetHit(): Vector3"})]}),"\n",(0,n.jsx)(s.p,{children:"Returns the position what mouse is hitting in 3D world."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegettarget",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetTarget()"})]}),"\n",(0,n.jsx)(s.p,{children:"Returns what mouse is hitting in 3D world."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegettargetfilter",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetTargetFilter()"})]}),"\n",(0,n.jsxs)(s.p,{children:["Returns mouse's ",(0,n.jsx)(s.code,{children:"filterDescendants"}),"."]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousesetcollisiongroupgroupname-string",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:SetCollisionGroup(groupName: string)"})]}),"\n",(0,n.jsx)(s.p,{children:"Sets the mouse's collision group to operate in."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousesettargetfilterobject-instance--instance",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:SetTargetFilter(object: Instance | {Instance})"})]}),"\n",(0,n.jsxs)(s.p,{children:["Sets the mouse's ",(0,n.jsx)(s.code,{children:"filterDescendants"}),". You can pass ",(0,n.jsx)(s.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Instance",children:"Instance"})," or an array of ",(0,n.jsx)(s.a,{href:"https://create.roblox.com/docs/reference/engine/classes/Instance",children:"Instances"}),"."]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegetraylength",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetRayLength()"})]}),"\n",(0,n.jsx)(s.p,{children:"Returns the lenght of the mouse ray."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousesetraylengthlength-number",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:SetRayLength(length: number)"})]}),"\n",(0,n.jsx)(s.p,{children:"Sets the lenght of the mouse ray."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousegetfiltertype-enumraycastfiltertype",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:GetFilterType(): Enum.RaycastFilterType"})]}),"\n",(0,n.jsx)(s.p,{children:"Returns mouse's RaycastFilterType."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousesetfiltertypefiltertype-enumraycastfiltertype",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:SetFilterType(filterType: Enum.RaycastFilterType)"})]}),"\n",(0,n.jsx)(s.p,{children:"Sets mouse's RaycastFilterType."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mouseenableicon",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:EnableIcon()"})]}),"\n",(0,n.jsx)(s.p,{children:"Enables mouse icon."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousedisableicon",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:DisableIcon()"})]}),"\n",(0,n.jsx)(s.p,{children:"Disables mouse icon."}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsxs)(s.h3,{id:"-mousedestroy",children:["> ",(0,n.jsx)(s.code,{children:"Mouse:Destroy()"})]}),"\n",(0,n.jsx)(s.p,{children:"Destroy's the Mouse, releasing it from memory."}),"\n",(0,n.jsx)(s.hr,{})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var o=t(6540);const n={},r=o.createContext(n);function i(e){const s=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(r.Provider,{value:s},e.children)}}}]);