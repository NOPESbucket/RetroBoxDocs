"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4190],{8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},9196:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api-class-reference/utility/Observer","title":"Observer","description":"Observer - is a pattern centers around observing the lifetime of a given state.","source":"@site/docs/api-class-reference/utility/Observer.md","sourceDirName":"api-class-reference/utility","slug":"/api-class-reference/utility/Observer","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/Observer","draft":false,"unlisted":false,"editUrl":"https://github.com/NOPESbucket/RetroBox/edit/main/docs/api-class-reference/utility/Observer.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"apiSidebar","previous":{"title":"ObjectPool","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/ObjectPool"},"next":{"title":"Promise","permalink":"/RetroBoxDocs/docs/api-class-reference/utility/Promise"}}');var s=n(4848),o=n(8453);const i={sidebar_position:11},a=void 0,c={},l=[];function d(e){const t={a:"a",br:"br",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Observer - is a pattern centers around observing the lifetime of a given state."}),"\n",(0,s.jsxs)(t.p,{children:['The "state" in question can be anything. It could be a color value, a position, a table, or anything else. Typically, current state can be grabbed immediately (e.g. ',(0,s.jsx)(t.code,{children:"part.Color"}),"), and further changes can be detected via some sort of signal (e.g. ",(0,s.jsx)(t.code,{children:'part:GetPropertyChangedSignal("Color")'}),")."]}),"\n",(0,s.jsx)(t.p,{children:"The observer pattern should provide two crucial elements:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Detect the current and all future changes to some state."}),"\n",(0,s.jsxs)(t.li,{children:["For a given observation, detect when that state changes to something else, thus to provide a way to clean up.",(0,s.jsx)(t.br,{}),"\n","The general layout of an observer should look like such:"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local stopObserving = observeSomething(...params, function(state)\r\n    -- Do something with "state". This runs every time state changes, including the initial state.\r\n\r\n    return function()\r\n        -- Cleanup. Called once "state" changes to something else, or the `stopObserving` function is called.\r\n    end\r\nend)\r\n\r\n-- At anytime, the `stopObserving` function can be called to stop the above observer and clean up\r\n-- and currently-existing observations:\r\nstopObserving()\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Full documentation ",(0,s.jsx)(t.a,{href:"https://sleitnick.github.io/RbxObservers/docs/observer-pattern",children:"here"})]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);